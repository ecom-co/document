"use strict";(self.webpackChunktemplate_docs=self.webpackChunktemplate_docs||[]).push([[6910],{28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>c});var i=s(96540);const t={},r=i.createContext(t);function l(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(r.Provider,{value:n},e.children)}},93404:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"tips/performance-issues","title":"Performance Issues","description":"Gi\u1ea3i quy\u1ebft v\u1ea5n \u0111\u1ec1 Performance Issues trong NestJS - T\u1ed1i \u01b0u h\xf3a, caching, v\xe0 monitoring hi\u1ec7u su\u1ea5t","source":"@site/docs/tips/performance-issues.md","sourceDirName":"tips","slug":"/tips/performance-issues","permalink":"/document/vi/docs/tips/performance-issues","draft":false,"unlisted":false,"editUrl":"https://github.com/ecom-co/document/tree/main/docs/tips/performance-issues.md","tags":[],"version":"current","frontMatter":{"title":"Performance Issues","description":"Gi\u1ea3i quy\u1ebft v\u1ea5n \u0111\u1ec1 Performance Issues trong NestJS - T\u1ed1i \u01b0u h\xf3a, caching, v\xe0 monitoring hi\u1ec7u su\u1ea5t"},"sidebar":"tutorialSidebar","previous":{"title":"Memory Leaks","permalink":"/document/vi/docs/tips/memory-leaks"},"next":{"title":"HTTP Methods","permalink":"/document/vi/docs/http-exception/http-methods"}}');var t=s(74848),r=s(28453);const l={title:"Performance Issues",description:"Gi\u1ea3i quy\u1ebft v\u1ea5n \u0111\u1ec1 Performance Issues trong NestJS - T\u1ed1i \u01b0u h\xf3a, caching, v\xe0 monitoring hi\u1ec7u su\u1ea5t"},c="Performance Issues trong NestJS",o={},a=[{value:"\ud83d\udcca Bi\u1ec3u \u0111\u1ed3 Performance Issues",id:"-bi\u1ec3u-\u0111\u1ed3-performance-issues",level:2},{value:"Bi\u1ec3u \u0111\u1ed3 1: Performance Impact Flow",id:"bi\u1ec3u-\u0111\u1ed3-1-performance-impact-flow",level:3},{value:"\ud83c\udfaf T\u1ea1i sao c\u1ea7n t\u1ed1i \u01b0u Performance?",id:"-t\u1ea1i-sao-c\u1ea7n-t\u1ed1i-\u01b0u-performance",level:2},{value:"\ud83d\udd0d Nguy\xean nh\xe2n g\xe2y ra Performance Issues",id:"-nguy\xean-nh\xe2n-g\xe2y-ra-performance-issues",level:2},{value:"1. N+1 Query Problem",id:"1-n1-query-problem",level:3},{value:"2. Synchronous Operations",id:"2-synchronous-operations",level:3},{value:"3. Memory Leaks v\xe0 Garbage Collection",id:"3-memory-leaks-v\xe0-garbage-collection",level:3},{value:"\ud83d\udee0\ufe0f Gi\u1ea3i ph\xe1p cho Performance Issues",id:"\ufe0f-gi\u1ea3i-ph\xe1p-cho-performance-issues",level:2},{value:"1. Database Query Optimization",id:"1-database-query-optimization",level:3},{value:"Bi\u1ec3u \u0111\u1ed3 2: N+1 Query Problem vs Optimized Query",id:"bi\u1ec3u-\u0111\u1ed3-2-n1-query-problem-vs-optimized-query",level:4},{value:"Bi\u1ec3u \u0111\u1ed3 3: Query Optimization Flow",id:"bi\u1ec3u-\u0111\u1ed3-3-query-optimization-flow",level:4},{value:"2. Caching Strategy",id:"2-caching-strategy",level:3},{value:"Bi\u1ec3u \u0111\u1ed3 4: Multi-Level Caching Architecture",id:"bi\u1ec3u-\u0111\u1ed3-4-multi-level-caching-architecture",level:4},{value:"Bi\u1ec3u \u0111\u1ed3 5: Cache Hit vs Cache Miss",id:"bi\u1ec3u-\u0111\u1ed3-5-cache-hit-vs-cache-miss",level:4},{value:"3. Async Processing v\u1edbi Queue",id:"3-async-processing-v\u1edbi-queue",level:3},{value:"Bi\u1ec3u \u0111\u1ed3 6: Queue Processing Architecture",id:"bi\u1ec3u-\u0111\u1ed3-6-queue-processing-architecture",level:4},{value:"Bi\u1ec3u \u0111\u1ed3 7: Queue Job Lifecycle",id:"bi\u1ec3u-\u0111\u1ed3-7-queue-job-lifecycle",level:4},{value:"4. Response Compression",id:"4-response-compression",level:3},{value:"Bi\u1ec3u \u0111\u1ed3 8: Compression Flow",id:"bi\u1ec3u-\u0111\u1ed3-8-compression-flow",level:4},{value:"Bi\u1ec3u \u0111\u1ed3 9: Compression Performance Impact",id:"bi\u1ec3u-\u0111\u1ed3-9-compression-performance-impact",level:4},{value:"\ud83d\udcca Performance Monitoring",id:"-performance-monitoring",level:2},{value:"Bi\u1ec3u \u0111\u1ed3 10: Performance Monitoring Architecture",id:"bi\u1ec3u-\u0111\u1ed3-10-performance-monitoring-architecture",level:4},{value:"Bi\u1ec3u \u0111\u1ed3 11: Response Time Distribution",id:"bi\u1ec3u-\u0111\u1ed3-11-response-time-distribution",level:4},{value:"1. Response Time Monitoring",id:"1-response-time-monitoring",level:3},{value:"2. Performance Metrics Service",id:"2-performance-metrics-service",level:3},{value:"\ud83e\uddea Performance Testing",id:"-performance-testing",level:2},{value:"1. Load Testing",id:"1-load-testing",level:3},{value:"2. Performance Benchmark",id:"2-performance-benchmark",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"performance-issues-trong-nestjs",children:"Performance Issues trong NestJS"})}),"\n",(0,t.jsx)(n.p,{children:"Performance Issues (v\u1ea5n \u0111\u1ec1 hi\u1ec7u su\u1ea5t) l\xe0 m\u1ed9t th\xe1ch th\u1ee9c l\u1edbn trong NestJS khi \u1ee9ng d\u1ee5ng ph\u1ea3i x\u1eed l\xfd nhi\u1ec1u request \u0111\u1ed3ng th\u1eddi, database queries ph\u1ee9c t\u1ea1p, ho\u1eb7c external API calls. \u0110\xe2y l\xe0 v\u1ea5n \u0111\u1ec1 \u1ea3nh h\u01b0\u1edfng tr\u1ef1c ti\u1ebfp \u0111\u1ebfn user experience v\xe0 scalability."}),"\n",(0,t.jsx)(n.h2,{id:"-bi\u1ec3u-\u0111\u1ed3-performance-issues",children:"\ud83d\udcca Bi\u1ec3u \u0111\u1ed3 Performance Issues"}),"\n",(0,t.jsx)(n.h3,{id:"bi\u1ec3u-\u0111\u1ed3-1-performance-impact-flow",children:"Bi\u1ec3u \u0111\u1ed3 1: Performance Impact Flow"}),"\n",(0,t.jsx)(n.mermaid,{value:"graph TD\n    A[Request] --\x3e|Slow Response| B[User Experience]\n    A --\x3e|High Latency| C[Timeout Errors]\n    A --\x3e|Resource Exhaustion| D[Server Overload]\n    \n    E[Database Queries] --\x3e|N+1 Problem| F[Slow Performance]\n    G[External APIs] --\x3e|Network Latency| H[Blocking Operations]\n    I[Memory Usage] --\x3e|High Consumption| J[Garbage Collection]\n    \n    K[Response Time] --\x3e|>2s| L[Poor UX]\n    K --\x3e|>5s| M[User Abandonment]\n    K --\x3e|>10s| N[System Failure]\n    \n    style A fill:#e8f5e8\n    style B fill:#ff6b6b\n    style C fill:#ff4757\n    style D fill:#c44569\n    style E fill:#feca57\n    style F fill:#ff6b6b\n    style G fill:#45b7d1\n    style H fill:#ff6b6b\n    style I fill:#96ceb4\n    style J fill:#ff6b6b\n    style K fill:#4ecdc4\n    style L fill:#ff6b6b\n    style M fill:#ff4757\n    style N fill:#c44569"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Gi\u1ea3i th\xedch:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Request"})," c\xf3 th\u1ec3 d\u1eabn \u0111\u1ebfn nhi\u1ec1u v\u1ea5n \u0111\u1ec1 performance kh\xe1c nhau"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Response Time"})," \u1ea3nh h\u01b0\u1edfng tr\u1ef1c ti\u1ebfp \u0111\u1ebfn user experience"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Database Queries"})," v\u1edbi N+1 problem g\xe2y ch\u1eadm performance"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"External APIs"})," v\u1edbi network latency g\xe2y blocking operations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Memory Usage"})," cao d\u1eabn \u0111\u1ebfn garbage collection overhead"]}),"\n"]}),"\n",(0,t.jsxs)(n.admonition,{title:"\u26a0\ufe0f V\u1ea5n \u0111\u1ec1 nghi\xeam tr\u1ecdng",type:"danger",children:[(0,t.jsx)(n.p,{children:"Performance Issues c\xf3 th\u1ec3 g\xe2y ra:"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Response time ch\u1eadm (>2s)"}),"\n",(0,t.jsx)(n.li,{children:"Timeout errors"}),"\n",(0,t.jsx)(n.li,{children:"Server overload"}),"\n",(0,t.jsx)(n.li,{children:"Poor user experience"}),"\n",(0,t.jsx)(n.li,{children:"Loss of users/customers"}),"\n",(0,t.jsx)(n.li,{children:"High infrastructure costs"}),"\n"]})]}),"\n",(0,t.jsx)(n.h2,{id:"-t\u1ea1i-sao-c\u1ea7n-t\u1ed1i-\u01b0u-performance",children:"\ud83c\udfaf T\u1ea1i sao c\u1ea7n t\u1ed1i \u01b0u Performance?"}),"\n",(0,t.jsx)(n.p,{children:"Performance trong NestJS \u1ea3nh h\u01b0\u1edfng tr\u1ef1c ti\u1ebfp \u0111\u1ebfn:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"User Experience"}),": Ng\u01b0\u1eddi d\xf9ng kh\xf4ng ch\u1edd \u0111\u1ee3i qu\xe1 l\xe2u"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Business Metrics"}),": Conversion rate, user retention"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Infrastructure Costs"}),": Server resources, bandwidth"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Scalability"}),": Kh\u1ea3 n\u0103ng x\u1eed l\xfd nhi\u1ec1u users"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Competitive Advantage"}),": So v\u1edbi \u0111\u1ed1i th\u1ee7 c\u1ea1nh tranh"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-nguy\xean-nh\xe2n-g\xe2y-ra-performance-issues",children:"\ud83d\udd0d Nguy\xean nh\xe2n g\xe2y ra Performance Issues"}),"\n",(0,t.jsx)(n.h3,{id:"1-n1-query-problem",children:"1. N+1 Query Problem"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",metastring:'title="V\xed d\u1ee5 N+1 Query Problem"',children:"// \u274c Kh\xf4ng t\u1ed1t - N+1 Queries\n@Injectable()\nexport class UserService {\n  async getUsersWithPosts() {\n    const users = await this.userRepository.find();\n    \n    // N+1 problem: 1 query cho users + N queries cho posts\n    const usersWithPosts = await Promise.all(\n      users.map(async (user) => {\n        const posts = await this.postRepository.findByUserId(user.id);\n        return { ...user, posts };\n      })\n    );\n    \n    return usersWithPosts;\n  }\n}\n\n// \u2705 T\u1ed1t - Single Query v\u1edbi JOIN\n@Injectable()\nexport class UserService {\n  async getUsersWithPosts() {\n    // Single query v\u1edbi JOIN\n    const usersWithPosts = await this.userRepository\n      .createQueryBuilder('user')\n      .leftJoinAndSelect('user.posts', 'post')\n      .getMany();\n    \n    return usersWithPosts;\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-synchronous-operations",children:"2. Synchronous Operations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",metastring:'title="V\xed d\u1ee5 Synchronous Operations"',children:"// \u274c Kh\xf4ng t\u1ed1t - Blocking Operations\n@Injectable()\nexport class FileService {\n  async processFile(filePath: string) {\n    // Blocking operation\n    const content = fs.readFileSync(filePath, 'utf8');\n    const processed = this.heavyProcessing(content);\n    \n    return processed;\n  }\n  \n  private heavyProcessing(content: string) {\n    // CPU-intensive operation\n    let result = '';\n    for (let i = 0; i < 1000000; i++) {\n      result += content.charAt(i % content.length);\n    }\n    return result;\n  }\n}\n\n// \u2705 T\u1ed1t - Async Operations\n@Injectable()\nexport class FileService {\n  async processFile(filePath: string) {\n    // Non-blocking operation\n    const content = await fs.promises.readFile(filePath, 'utf8');\n    \n    // Move heavy processing to background\n    const processed = await this.heavyProcessingAsync(content);\n    \n    return processed;\n  }\n  \n  private async heavyProcessingAsync(content: string) {\n    return new Promise((resolve) => {\n      // Use worker thread ho\u1eb7c process.nextTick\n      process.nextTick(() => {\n        let result = '';\n        for (let i = 0; i < 1000000; i++) {\n          result += content.charAt(i % content.length);\n        }\n        resolve(result);\n      });\n    });\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-memory-leaks-v\xe0-garbage-collection",children:"3. Memory Leaks v\xe0 Garbage Collection"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",metastring:'title="V\xed d\u1ee5 Memory Issues"',children:"// \u274c Kh\xf4ng t\u1ed1t - Memory Accumulation\n@Injectable()\nexport class CacheService {\n  private cache = new Map();\n  \n  set(key: string, value: any) {\n    // Kh\xf4ng c\xf3 size limit\n    this.cache.set(key, value);\n  }\n  \n  get(key: string) {\n    return this.cache.get(key);\n  }\n}\n\n// \u2705 T\u1ed1t - Memory Management\n@Injectable()\nexport class CacheService {\n  private cache = new Map();\n  private maxSize = 1000;\n  \n  set(key: string, value: any) {\n    // Check size limit\n    if (this.cache.size >= this.maxSize) {\n      // Remove oldest entries\n      const firstKey = this.cache.keys().next().value;\n      this.cache.delete(firstKey);\n    }\n    \n    this.cache.set(key, value);\n  }\n  \n  get(key: string) {\n    return this.cache.get(key);\n  }\n  \n  // Cleanup method\n  cleanup() {\n    this.cache.clear();\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"\ufe0f-gi\u1ea3i-ph\xe1p-cho-performance-issues",children:"\ud83d\udee0\ufe0f Gi\u1ea3i ph\xe1p cho Performance Issues"}),"\n",(0,t.jsx)(n.h3,{id:"1-database-query-optimization",children:"1. Database Query Optimization"}),"\n",(0,t.jsx)(n.h4,{id:"bi\u1ec3u-\u0111\u1ed3-2-n1-query-problem-vs-optimized-query",children:"Bi\u1ec3u \u0111\u1ed3 2: N+1 Query Problem vs Optimized Query"}),"\n",(0,t.jsx)(n.mermaid,{value:'graph TD\n    subgraph "N+1 Query Problem"\n        A[Request] --\x3e B[Query Users]\n        B --\x3e C[100 Users]\n        C --\x3e D[Query Posts for User 1]\n        C --\x3e E[Query Posts for User 2]\n        C --\x3e F[Query Posts for User 3]\n        C --\x3e G[...]\n        C --\x3e H[Query Posts for User 100]\n        \n        style A fill:#ff6b6b\n        style B fill:#ff6b6b\n        style C fill:#ff6b6b\n        style D fill:#ff6b6b\n        style E fill:#ff6b6b\n        style F fill:#ff6b6b\n        style G fill:#ff6b6b\n        style H fill:#ff6b6b\n    end\n    \n    subgraph "Optimized Query"\n        I[Request] --\x3e J[Single JOIN Query]\n        J --\x3e K[Users + Posts in 1 query]\n        \n        style I fill:#4ecdc4\n        style J fill:#4ecdc4\n        style K fill:#4ecdc4\n    end\n    \n    A -.->|vs| I\n    B -.->|vs| J'}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Gi\u1ea3i th\xedch:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"N+1 Problem"}),": 1 query cho users + N queries cho posts (101 queries total)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Optimized Query"}),": Ch\u1ec9 1 query v\u1edbi JOIN, l\u1ea5y t\u1ea5t c\u1ea3 data c\u1ea7n thi\u1ebft"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Performance gain"}),": Gi\u1ea3m t\u1eeb 101 queries xu\u1ed1ng 1 query"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"bi\u1ec3u-\u0111\u1ed3-3-query-optimization-flow",children:"Bi\u1ec3u \u0111\u1ed3 3: Query Optimization Flow"}),"\n",(0,t.jsx)(n.mermaid,{value:"graph TD\n    A[Request] --\x3e B[Check Cache]\n    B --\x3e|Cache Hit| C[Return Cached Data]\n    B --\x3e|Cache Miss| D[Build Query Builder]\n    \n    D --\x3e E[Add JOINs]\n    E --\x3e F[Add WHERE conditions]\n    F --\x3e G[Add ORDER BY]\n    G --\x3e H[Add LIMIT/Pagination]\n    \n    H --\x3e I[Execute Query]\n    I --\x3e J[Cache Result]\n    J --\x3e K[Return Data]\n    \n    style A fill:#e8f5e8\n    style B fill:#feca57\n    style C fill:#4ecdc4\n    style D fill:#45b7d1\n    style E fill:#96ceb4\n    style F fill:#96ceb4\n    style G fill:#96ceb4\n    style H fill:#96ceb4\n    style I fill:#ff6b6b\n    style J fill:#feca57\n    style K fill:#4ecdc4"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Gi\u1ea3i th\xedch:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cache First"}),": Ki\u1ec3m tra cache tr\u01b0\u1edbc khi query database"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Query Builder"}),": X\xe2y d\u1ef1ng query t\u1ed1i \u01b0u v\u1edbi JOINs v\xe0 conditions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Pagination"}),": Gi\u1edbi h\u1ea1n s\u1ed1 l\u01b0\u1ee3ng records tr\u1ea3 v\u1ec1"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Caching"}),": L\u01b0u k\u1ebft qu\u1ea3 \u0111\u1ec3 s\u1eed d\u1ee5ng l\u1ea7n sau"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",metastring:'title="Query Optimization Service"',children:"@Injectable()\nexport class QueryOptimizerService {\n  async getUsersWithPostsOptimized() {\n    // S\u1eed d\u1ee5ng Query Builder v\u1edbi JOIN\n    const queryBuilder = this.userRepository\n      .createQueryBuilder('user')\n      .leftJoinAndSelect('user.posts', 'post')\n      .leftJoinAndSelect('user.profile', 'profile')\n      .where('user.isActive = :isActive', { isActive: true })\n      .orderBy('user.createdAt', 'DESC')\n      .take(20); // Pagination\n    \n    // Cache query result\n    const cacheKey = `users_with_posts_${JSON.stringify(queryBuilder.getQuery())}`;\n    const cached = await this.cacheService.get(cacheKey);\n    \n    if (cached) {\n      return cached;\n    }\n    \n    const result = await queryBuilder.getMany();\n    \n    // Cache for 5 minutes\n    await this.cacheService.set(cacheKey, result, 300);\n    \n    return result;\n  }\n  \n  async getUsersWithPostsBatch(userIds: string[]) {\n    // Batch processing\n    const batchSize = 100;\n    const results = [];\n    \n    for (let i = 0; i < userIds.length; i += batchSize) {\n      const batch = userIds.slice(i, i + batchSize);\n      \n      const batchResult = await this.userRepository\n        .createQueryBuilder('user')\n        .leftJoinAndSelect('user.posts', 'post')\n        .whereInIds(batch)\n        .getMany();\n      \n      results.push(...batchResult);\n    }\n    \n    return results;\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-caching-strategy",children:"2. Caching Strategy"}),"\n",(0,t.jsx)(n.h4,{id:"bi\u1ec3u-\u0111\u1ed3-4-multi-level-caching-architecture",children:"Bi\u1ec3u \u0111\u1ed3 4: Multi-Level Caching Architecture"}),"\n",(0,t.jsx)(n.mermaid,{value:"graph TD\n    A[Request] --\x3e B[Memory Cache Check]\n    B --\x3e|Hit| C[Return Data from Memory]\n    B --\x3e|Miss| D[Redis Cache Check]\n    \n    D --\x3e|Hit| E[Return Data from Redis]\n    D --\x3e|Miss| F[Database Query]\n    \n    E --\x3e G[Store in Memory Cache]\n    F --\x3e H[Store in Both Caches]\n    \n    G --\x3e I[Return Data]\n    H --\x3e I\n    \n    J[Memory Cache] --\x3e|Fastest| K[< 1ms]\n    L[Redis Cache] --\x3e|Fast| M[1-5ms]\n    N[Database] --\x3e|Slow| O[10-100ms]\n    \n    style A fill:#e8f5e8\n    style B fill:#feca57\n    style C fill:#4ecdc4\n    style D fill:#45b7d1\n    style E fill:#4ecdc4\n    style F fill:#ff6b6b\n    style G fill:#feca57\n    style H fill:#feca57\n    style I fill:#4ecdc4\n    style J fill:#feca57\n    style K fill:#4ecdc4\n    style L fill:#45b7d1\n    style M fill:#4ecdc4\n    style N fill:#ff6b6b\n    style O fill:#ff6b6b"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Gi\u1ea3i th\xedch:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Memory Cache"}),": Level 1 - nhanh nh\u1ea5t (< 1ms), l\u01b0u trong process memory"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Redis Cache"}),": Level 2 - nhanh (1-5ms), l\u01b0u trong Redis server"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Database"}),": Level 3 - ch\u1eadm nh\u1ea5t (10-100ms), source of truth"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cache Invalidation"}),": X\xf3a cache khi data thay \u0111\u1ed5i"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"bi\u1ec3u-\u0111\u1ed3-5-cache-hit-vs-cache-miss",children:"Bi\u1ec3u \u0111\u1ed3 5: Cache Hit vs Cache Miss"}),"\n",(0,t.jsx)(n.mermaid,{value:'graph LR\n    subgraph "Cache Hit Scenario"\n        A[Request] --\x3e B[Memory Cache]\n        B --\x3e|Hit| C[Return Data]\n        C --\x3e D[Response Time: < 1ms]\n        \n        style A fill:#4ecdc4\n        style B fill:#4ecdc4\n        style C fill:#4ecdc4\n        style D fill:#4ecdc4\n    end\n    \n    subgraph "Cache Miss Scenario"\n        E[Request] --\x3e F[Memory Cache]\n        F --\x3e|Miss| G[Redis Cache]\n        G --\x3e|Miss| H[Database]\n        H --\x3e I[Store in Caches]\n        I --\x3e J[Return Data]\n        J --\x3e K[Response Time: 50-100ms]\n        \n        style E fill:#ff6b6b\n        style F fill:#ff6b6b\n        style G fill:#ff6b6b\n        style H fill:#ff6b6b\n        style I fill:#ff6b6b\n        style J fill:#ff6b6b\n        style K fill:#ff6b6b\n    end'}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Gi\u1ea3i th\xedch:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cache Hit"}),": Data c\xf3 s\u1eb5n trong cache, response time r\u1ea5t nhanh"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cache Miss"}),": Data kh\xf4ng c\xf3 trong cache, ph\u1ea3i query database"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Performance Impact"}),": Cache hit nhanh h\u01a1n cache miss 50-100 l\u1ea7n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",metastring:'title="Multi-Level Caching Service"',children:"@Injectable()\nexport class MultiLevelCacheService {\n  constructor(\n    private redisService: RedisService,\n    private memoryCache: Map<string, any>\n  ) {}\n  \n  async get(key: string) {\n    // Level 1: Memory Cache (Fastest)\n    if (this.memoryCache.has(key)) {\n      return this.memoryCache.get(key);\n    }\n    \n    // Level 2: Redis Cache (Fast)\n    const redisValue = await this.redisService.get(key);\n    if (redisValue) {\n      // Store in memory cache\n      this.memoryCache.set(key, redisValue);\n      return redisValue;\n    }\n    \n    return null;\n  }\n  \n  async set(key: string, value: any, ttl: number = 300) {\n    // Set in both caches\n    this.memoryCache.set(key, value);\n    await this.redisService.set(key, value, ttl);\n  }\n  \n  async invalidate(pattern: string) {\n    // Clear memory cache\n    for (const key of this.memoryCache.keys()) {\n      if (key.includes(pattern)) {\n        this.memoryCache.delete(key);\n      }\n    }\n    \n    // Clear Redis cache\n    await this.redisService.del(pattern);\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-async-processing-v\u1edbi-queue",children:"3. Async Processing v\u1edbi Queue"}),"\n",(0,t.jsx)(n.h4,{id:"bi\u1ec3u-\u0111\u1ed3-6-queue-processing-architecture",children:"Bi\u1ec3u \u0111\u1ed3 6: Queue Processing Architecture"}),"\n",(0,t.jsx)(n.mermaid,{value:"graph TD\n    A[User Request] --\x3e B[Add Job to Queue]\n    B --\x3e C[Queue Manager]\n    \n    C --\x3e D[Worker 1]\n    C --\x3e E[Worker 2]\n    C --\x3e F[Worker 3]\n    C --\x3e G[Worker N]\n    \n    D --\x3e H[Process Email Job]\n    E --\x3e I[Process Email Job]\n    F --\x3e J[Process Email Job]\n    G --\x3e K[Process Email Job]\n    \n    H --\x3e L[Job Completed]\n    I --\x3e L\n    J --\x3e L\n    K --\x3e L\n    \n    L --\x3e M[Update Job Status]\n    M --\x3e N[Notify User]\n    \n    style A fill:#e8f5e8\n    style B fill:#feca57\n    style C fill:#45b7d1\n    style D fill:#96ceb4\n    style E fill:#96ceb4\n    style F fill:#96ceb4\n    style G fill:#96ceb4\n    style H fill:#4ecdc4\n    style I fill:#4ecdc4\n    style J fill:#4ecdc4\n    style K fill:#4ecdc4\n    style L fill:#4ecdc4\n    style M fill:#feca57\n    style N fill:#4ecdc4"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Gi\u1ea3i th\xedch:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Queue Manager"}),": Qu\u1ea3n l\xfd v\xe0 ph\xe2n ph\u1ed1i jobs cho c\xe1c workers"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Multiple Workers"}),": X\u1eed l\xfd jobs song song, t\u0103ng throughput"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Async Processing"}),": User kh\xf4ng ph\u1ea3i ch\u1edd \u0111\u1ee3i job ho\xe0n th\xe0nh"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Scalability"}),": C\xf3 th\u1ec3 th\xeam workers khi c\u1ea7n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"bi\u1ec3u-\u0111\u1ed3-7-queue-job-lifecycle",children:"Bi\u1ec3u \u0111\u1ed3 7: Queue Job Lifecycle"}),"\n",(0,t.jsx)(n.mermaid,{value:"graph LR\n    A[New Job] --\x3e B[Waiting]\n    B --\x3e C[Active]\n    C --\x3e D[Completed]\n    C --\x3e E[Failed]\n    \n    E --\x3e F[Retry]\n    F --\x3e B\n    \n    G[Queue Stats] --\x3e H[Waiting: 10]\n    G --\x3e I[Active: 5]\n    G --\x3e J[Completed: 100]\n    G --\x3e K[Failed: 2]\n    \n    style A fill:#e8f5e8\n    style B fill:#feca57\n    style C fill:#45b7d1\n    style D fill:#4ecdc4\n    style E fill:#ff6b6b\n    style F fill:#ff6b6b\n    style G fill:#f3e5f5\n    style H fill:#feca57\n    style I fill:#45b7d1\n    style J fill:#4ecdc4\n    style K fill:#ff6b6b"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Gi\u1ea3i th\xedch:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Job States"}),": New \u2192 Waiting \u2192 Active \u2192 Completed/Failed"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Retry Mechanism"}),": Failed jobs c\xf3 th\u1ec3 retry"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Queue Monitoring"}),": Theo d\xf5i s\u1ed1 l\u01b0\u1ee3ng jobs \u1edf m\u1ed7i tr\u1ea1ng th\xe1i"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Performance Metrics"}),": \u0110o l\u01b0\u1eddng throughput v\xe0 error rate"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",metastring:'title="Queue Service cho Heavy Operations"',children:"@Injectable()\nexport class QueueService {\n  constructor(\n    private bullQueue: Queue,\n    private emailService: EmailService\n  ) {}\n  \n  async addEmailJob(emailData: any) {\n    // Add to queue thay v\xec process ngay\n    await this.bullQueue.add('send-email', emailData, {\n      priority: 1,\n      attempts: 3,\n      backoff: {\n        type: 'exponential',\n        delay: 2000\n      }\n    });\n  }\n  \n  @Processor('send-email')\n  async processEmailJob(job: Job) {\n    try {\n      await this.emailService.sendEmail(job.data);\n      job.moveToCompleted();\n    } catch (error) {\n      job.moveToFailed({ message: error.message });\n    }\n  }\n  \n  // Monitor queue performance\n  async getQueueStats() {\n    const waiting = await this.bullQueue.getWaiting();\n    const active = await this.bullQueue.getActive();\n    const completed = await this.bullQueue.getCompleted();\n    const failed = await this.bullQueue.getFailed();\n    \n    return {\n      waiting: waiting.length,\n      active: active.length,\n      completed: completed.length,\n      failed: failed.length\n    };\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"4-response-compression",children:"4. Response Compression"}),"\n",(0,t.jsx)(n.h4,{id:"bi\u1ec3u-\u0111\u1ed3-8-compression-flow",children:"Bi\u1ec3u \u0111\u1ed3 8: Compression Flow"}),"\n",(0,t.jsx)(n.mermaid,{value:"graph TD\n    A[Request] --\x3e B[Check Compression Headers]\n    B --\x3e|Accept-Encoding: gzip| C[Enable Compression]\n    B --\x3e|No Compression| D[No Compression]\n    \n    C --\x3e E[Response Data]\n    E --\x3e F[Compress with gzip]\n    F --\x3e G[Set Content-Encoding: gzip]\n    G --\x3e H[Send Compressed Response]\n    \n    D --\x3e I[Response Data]\n    I --\x3e J[Send Uncompressed Response]\n    \n    K[Original Size: 100KB] --\x3e L[Compressed Size: 25KB]\n    L --\x3e M[Bandwidth Saved: 75%]\n    \n    style A fill:#e8f5e8\n    style B fill:#feca57\n    style C fill:#4ecdc4\n    style D fill:#ff6b6b\n    style E fill:#45b7d1\n    style F fill:#96ceb4\n    style G fill:#feca57\n    style H fill:#4ecdc4\n    style I fill:#45b7d1\n    style J fill:#ff6b6b\n    style K fill:#ff6b6b\n    style L fill:#4ecdc4\n    style M fill:#4ecdc4"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Gi\u1ea3i th\xedch:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Compression Check"}),": Ki\u1ec3m tra Accept-Encoding header t\u1eeb client"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Gzip Compression"}),": N\xe9n response data \u0111\u1ec3 gi\u1ea3m bandwidth"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Size Reduction"}),": Th\u01b0\u1eddng gi\u1ea3m 60-80% k\xedch th\u01b0\u1edbc response"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Performance Gain"}),": Gi\u1ea3m th\u1eddi gian download v\xe0 bandwidth usage"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"bi\u1ec3u-\u0111\u1ed3-9-compression-performance-impact",children:"Bi\u1ec3u \u0111\u1ed3 9: Compression Performance Impact"}),"\n",(0,t.jsx)(n.mermaid,{value:'graph LR\n    subgraph "Without Compression"\n        A[100KB Response] --\x3e B[Network Transfer]\n        B --\x3e C[Client Download]\n        C --\x3e D[Total Time: 200ms]\n        \n        style A fill:#ff6b6b\n        style B fill:#ff6b6b\n        style C fill:#ff6b6b\n        style D fill:#ff6b6b\n    end\n    \n    subgraph "With Compression"\n        E[25KB Response] --\x3e F[Network Transfer]\n        F --\x3e G[Client Download]\n        G --\x3e H[Total Time: 50ms]\n        \n        style E fill:#4ecdc4\n        style F fill:#4ecdc4\n        style G fill:#4ecdc4\n        style H fill:#4ecdc4\n    end\n    \n    I[Performance Improvement] --\x3e J[4x Faster]\n    J --\x3e K[75% Bandwidth Saved]\n    \n    style I fill:#feca57\n    style J fill:#4ecdc4\n    style K fill:#4ecdc4'}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Gi\u1ea3i th\xedch:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Bandwidth Savings"}),": Gi\u1ea3m 75% bandwidth usage"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Faster Transfer"}),": Response time nhanh h\u01a1n 4 l\u1ea7n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Better UX"}),": User experience \u0111\u01b0\u1ee3c c\u1ea3i thi\u1ec7n \u0111\xe1ng k\u1ec3"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cost Reduction"}),": Gi\u1ea3m chi ph\xed bandwidth cho server"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",metastring:'title="Compression Middleware"',children:"import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\nimport * as compression from 'compression';\n\n@Injectable()\nexport class CompressionMiddleware implements NestMiddleware {\n  private compressionMiddleware = compression({\n    filter: (req, res) => {\n      // Ch\u1ec9 compress cho responses > 1KB\n      if (req.headers['x-no-compression']) {\n        return false;\n      }\n      return compression.filter(req, res);\n    },\n    level: 6, // Compression level\n    threshold: 1024 // Minimum size to compress\n  });\n  \n  use(req: Request, res: Response, next: NextFunction) {\n    this.compressionMiddleware(req, res, next);\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-performance-monitoring",children:"\ud83d\udcca Performance Monitoring"}),"\n",(0,t.jsx)(n.h4,{id:"bi\u1ec3u-\u0111\u1ed3-10-performance-monitoring-architecture",children:"Bi\u1ec3u \u0111\u1ed3 10: Performance Monitoring Architecture"}),"\n",(0,t.jsx)(n.mermaid,{value:"graph TD\n    A[HTTP Request] --\x3e B[Response Time Interceptor]\n    B --\x3e C[Start Timer]\n    C --\x3e D[Process Request]\n    D --\x3e E[End Timer]\n    \n    E --\x3e F[Calculate Duration]\n    F --\x3e G[Performance Metrics Service]\n    \n    G --\x3e H[Store Metrics]\n    H --\x3e I[Generate Reports]\n    \n    J[Slow Request Alert] --\x3e|>1s| K[Warning Log]\n    L[Very Slow Alert] --\x3e|>5s| M[Error Log]\n    \n    style A fill:#e8f5e8\n    style B fill:#feca57\n    style C fill:#45b7d1\n    style D fill:#96ceb4\n    style E fill:#45b7d1\n    style F fill:#feca57\n    style G fill:#4ecdc4\n    style H fill:#4ecdc4\n    style I fill:#4ecdc4\n    style J fill:#feca57\n    style K fill:#ff6b6b\n    style L fill:#feca57\n    style M fill:#ff6b6b"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Gi\u1ea3i th\xedch:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Interceptor"}),": B\u1eaft \u0111\u1ea7u v\xe0 k\u1ebft th\xfac timer cho m\u1ed7i request"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Metrics Collection"}),": Thu th\u1eadp performance data"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Alerting"}),": C\u1ea3nh b\xe1o khi response time qu\xe1 ch\u1eadm"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Reporting"}),": T\u1ea1o b\xe1o c\xe1o performance"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"bi\u1ec3u-\u0111\u1ed3-11-response-time-distribution",children:"Bi\u1ec3u \u0111\u1ed3 11: Response Time Distribution"}),"\n",(0,t.jsx)(n.mermaid,{value:"graph TD\n    A[Response Time Metrics] --\x3e B[Fast: < 100ms]\n    A --\x3e C[Normal: 100-500ms]\n    A --\x3e D[Slow: 500ms-1s]\n    A --\x3e E[Very Slow: > 1s]\n    \n    B --\x3e F[80% of requests]\n    C --\x3e G[15% of requests]\n    D --\x3e H[4% of requests]\n    E --\x3e I[1% of requests]\n    \n    J[Performance Target] --\x3e K[95% < 500ms]\n    K --\x3e L[99% < 1s]\n    \n    style A fill:#f3e5f5\n    style B fill:#4ecdc4\n    style C fill:#96ceb4\n    style D fill:#feca57\n    style E fill:#ff6b6b\n    style F fill:#4ecdc4\n    style G fill:#96ceb4\n    style H fill:#feca57\n    style I fill:#ff6b6b\n    style J fill:#feca57\n    style K fill:#4ecdc4\n    style L fill:#4ecdc4"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Gi\u1ea3i th\xedch:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Performance Distribution"}),": Ph\xe2n b\u1ed1 response time c\u1ee7a c\xe1c requests"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Performance Targets"}),": M\u1ee5c ti\xeau 95% requests < 500ms"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Alert Thresholds"}),": C\u1ea3nh b\xe1o khi performance v\u01b0\u1ee3t ng\u01b0\u1ee1ng"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Monitoring Focus"}),": T\u1eadp trung v\xe0o slow requests"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"1-response-time-monitoring",children:"1. Response Time Monitoring"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",metastring:'title="Response Time Interceptor"',children:"@Injectable()\nexport class ResponseTimeInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n    const start = Date.now();\n    const request = context.switchToHttp().getRequest();\n    \n    return next.handle().pipe(\n      tap(() => {\n        const duration = Date.now() - start;\n        \n        // Log slow requests\n        if (duration > 1000) {\n          console.warn(`\ud83d\udc0c Slow request: ${request.method} ${request.url} - ${duration}ms`);\n        }\n        \n        // Send metrics to monitoring service\n        this.metricsService.recordResponseTime(request.url, duration);\n      })\n    );\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-performance-metrics-service",children:"2. Performance Metrics Service"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",metastring:'title="Performance Metrics Service"',children:"@Injectable()\nexport class PerformanceMetricsService {\n  private metrics = new Map<string, Array<number>>();\n  \n  recordResponseTime(endpoint: string, duration: number) {\n    if (!this.metrics.has(endpoint)) {\n      this.metrics.set(endpoint, []);\n    }\n    \n    const values = this.metrics.get(endpoint);\n    values.push(duration);\n    \n    // Keep last 1000 values\n    if (values.length > 1000) {\n      values.shift();\n    }\n  }\n  \n  getEndpointStats(endpoint: string) {\n    const values = this.metrics.get(endpoint) || [];\n    \n    if (values.length === 0) {\n      return null;\n    }\n    \n    const sorted = values.sort((a, b) => a - b);\n    const avg = values.reduce((a, b) => a + b, 0) / values.length;\n    const p95 = sorted[Math.floor(values.length * 0.95)];\n    const p99 = sorted[Math.floor(values.length * 0.99)];\n    \n    return {\n      count: values.length,\n      average: Math.round(avg),\n      median: sorted[Math.floor(values.length / 2)],\n      p95: p95,\n      p99: p99,\n      min: sorted[0],\n      max: sorted[sorted.length - 1]\n    };\n  }\n  \n  getOverallStats() {\n    const allValues = Array.from(this.metrics.values()).flat();\n    \n    if (allValues.length === 0) {\n      return null;\n    }\n    \n    const avg = allValues.reduce((a, b) => a + b, 0) / allValues.length;\n    const sorted = allValues.sort((a, b) => a - b);\n    const p95 = sorted[Math.floor(allValues.length * 0.95)];\n    \n    return {\n      totalRequests: allValues.length,\n      averageResponseTime: Math.round(avg),\n      p95ResponseTime: p95\n    };\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-performance-testing",children:"\ud83e\uddea Performance Testing"}),"\n",(0,t.jsx)(n.h3,{id:"1-load-testing",children:"1. Load Testing"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",metastring:'title="Load Test Service"',children:"@Injectable()\nexport class LoadTestService {\n  async runLoadTest(endpoint: string, concurrentUsers: number, duration: number) {\n    const startTime = Date.now();\n    const results = [];\n    \n    // Simulate concurrent users\n    const userPromises = Array.from({ length: concurrentUsers }, (_, i) =>\n      this.simulateUser(endpoint, i, startTime, duration)\n    );\n    \n    await Promise.all(userPromises);\n    \n    return this.analyzeResults(results);\n  }\n  \n  private async simulateUser(endpoint: string, userId: number, startTime: number, duration: number) {\n    const results = [];\n    \n    while (Date.now() - startTime < duration) {\n      const requestStart = Date.now();\n      \n      try {\n        await this.makeRequest(endpoint);\n        const responseTime = Date.now() - requestStart;\n        \n        results.push({\n          userId,\n          timestamp: Date.now(),\n          responseTime,\n          success: true\n        });\n      } catch (error) {\n        results.push({\n          userId,\n          timestamp: Date.now(),\n          responseTime: Date.now() - requestStart,\n          success: false,\n          error: error.message\n        });\n      }\n      \n      // Wait between requests\n      await new Promise(resolve => setTimeout(resolve, 100));\n    }\n    \n    return results;\n  }\n  \n  private async makeRequest(endpoint: string) {\n    // Implement actual HTTP request\n    return fetch(endpoint);\n  }\n  \n  private analyzeResults(allResults: any[]) {\n    const successful = allResults.filter(r => r.success);\n    const failed = allResults.filter(r => !r.success);\n    \n    const responseTimes = successful.map(r => r.responseTime);\n    const avgResponseTime = responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length;\n    \n    return {\n      totalRequests: allResults.length,\n      successful: successful.length,\n      failed: failed.length,\n      successRate: (successful.length / allResults.length) * 100,\n      averageResponseTime: Math.round(avgResponseTime),\n      minResponseTime: Math.min(...responseTimes),\n      maxResponseTime: Math.max(...responseTimes)\n    };\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-performance-benchmark",children:"2. Performance Benchmark"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",metastring:'title="Performance Benchmark"',children:"describe('Performance Tests', () => {\n  let app: INestApplication;\n  \n  beforeAll(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [AppModule]\n    }).compile();\n    \n    app = moduleFixture.createNestApplication();\n    await app.init();\n  });\n  \n  afterAll(async () => {\n    await app.close();\n  });\n  \n  it('should handle 100 concurrent requests under 2 seconds', async () => {\n    const startTime = Date.now();\n    const concurrentRequests = 100;\n    \n    const promises = Array.from({ length: concurrentRequests }, () =>\n      request(app.getHttpServer())\n        .get('/users')\n        .expect(200)\n    );\n    \n    await Promise.all(promises);\n    \n    const totalTime = Date.now() - startTime;\n    \n    // T\u1ea5t c\u1ea3 requests ph\u1ea3i ho\xe0n th\xe0nh trong 2 gi\xe2y\n    expect(totalTime).toBeLessThan(2000);\n  });\n  \n  it('should maintain response time under 500ms for single request', async () => {\n    const startTime = Date.now();\n    \n    await request(app.getHttpServer())\n      .get('/users')\n      .expect(200);\n    \n    const responseTime = Date.now() - startTime;\n    \n    expect(responseTime).toBeLessThan(500);\n  });\n});\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.admonition,{title:"\ud83d\udca1 L\u1eddi khuy\xean t\u1ed5ng k\u1ebft",type:"tip",children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Optimize database queries"})," - S\u1eed d\u1ee5ng JOIN thay v\xec N+1 queries"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Implement caching strategy"})," - Multi-level caching (Memory + Redis)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use async processing"})," - Queue cho heavy operations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Monitor performance metrics"})," - Response time, throughput"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Load test regularly"})," - \u0110\u1ea3m b\u1ea3o performance d\u01b0\u1edbi t\u1ea3i cao"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Compress responses"})," - Gi\u1ea3m bandwidth usage"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Profile memory usage"})," - Tr\xe1nh memory leaks"]}),"\n"]})}),"\n",(0,t.jsx)(n.admonition,{title:"\ud83d\udcda T\xe0i li\u1ec7u tham kh\u1ea3o",type:"info",children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://docs.nestjs.com/techniques/performance",children:"NestJS Performance Best Practices"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://nodejs.org/en/docs/guides/performance/",children:"Node.js Performance Optimization"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://typeorm.io/#/query-builder",children:"Database Query Optimization"})}),"\n"]})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"B\xe0i ti\u1ebfp theo:"})," ",(0,t.jsx)(n.a,{href:"/docs/tips/database-connection-issues",children:"Database Connection Issues trong NestJS"})]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}}}]);