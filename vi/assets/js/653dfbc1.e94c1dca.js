"use strict";(self.webpackChunktemplate_docs=self.webpackChunktemplate_docs||[]).push([[1541],{11470:(e,n,s)=>{s.d(n,{A:()=>b});var t=s(96540),i=s(34164),o=s(23104),r=s(56347),a=s(205),l=s(57485),c=s(31682),d=s(70679);function u(e){return t.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function m(e){const{values:n,children:s}=e;return(0,t.useMemo)(()=>{const e=n??function(e){return u(e).map(({props:{value:e,label:n,attributes:s,default:t}})=>({value:e,label:n,attributes:s,default:t}))}(s);return function(e){const n=(0,c.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,s])}function p({value:e,tabValues:n}){return n.some(n=>n.value===e)}function h({queryString:e=!1,groupId:n}){const s=(0,r.W6)(),i=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,l.aZ)(i),(0,t.useCallback)(e=>{if(!i)return;const n=new URLSearchParams(s.location.search);n.set(i,e),s.replace({...s.location,search:n.toString()})},[i,s])]}function g(e){const{defaultValue:n,queryString:s=!1,groupId:i}=e,o=m(e),[r,l]=(0,t.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!p({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const s=n.find(e=>e.default)??n[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:o})),[c,u]=h({queryString:s,groupId:i}),[g,v]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[s,i]=(0,d.Dv)(n);return[s,(0,t.useCallback)(e=>{n&&i.set(e)},[n,i])]}({groupId:i}),f=(()=>{const e=c??g;return p({value:e,tabValues:o})?e:null})();(0,a.A)(()=>{f&&l(f)},[f]);return{selectedValue:r,selectValue:(0,t.useCallback)(e=>{if(!p({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),v(e)},[u,v,o]),tabValues:o}}var v=s(92303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=s(74848);function R({className:e,block:n,selectedValue:s,selectValue:t,tabValues:r}){const a=[],{blockElementScrollPositionUntilNextRender:l}=(0,o.a_)(),c=e=>{const n=e.currentTarget,i=a.indexOf(n),o=r[i].value;o!==s&&(l(n),t(o))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const s=a.indexOf(e.currentTarget)+1;n=a[s]??a[0];break}case"ArrowLeft":{const s=a.indexOf(e.currentTarget)-1;n=a[s]??a[a.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":n},e),children:r.map(({value:e,label:n,attributes:t})=>(0,x.jsx)("li",{role:"tab",tabIndex:s===e?0:-1,"aria-selected":s===e,ref:e=>{a.push(e)},onKeyDown:d,onClick:c,...t,className:(0,i.A)("tabs__item",f.tabItem,t?.className,{"tabs__item--active":s===e}),children:n??e},e))})}function S({lazy:e,children:n,selectedValue:s}){const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=o.find(e=>e.props.value===s);return e?(0,t.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:o.map((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==s}))})}function j(e){const n=g(e);return(0,x.jsxs)("div",{className:(0,i.A)("tabs-container",f.tabList),children:[(0,x.jsx)(R,{...n,...e}),(0,x.jsx)(S,{...n,...e})]})}function b(e){const n=(0,v.A)();return(0,x.jsx)(j,{...e,children:u(e.children)},String(n))}},19365:(e,n,s)=>{s.d(n,{A:()=>r});s(96540);var t=s(34164);const i={tabItem:"tabItem_Ymn6"};var o=s(74848);function r({children:e,hidden:n,className:s}){return(0,o.jsx)("div",{role:"tabpanel",className:(0,t.A)(i.tabItem,s),hidden:n,children:e})}},28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var t=s(96540);const i={},o=t.createContext(i);function r(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:n},e.children)}},66854:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"ecom-co/libs/redis/docs/redis-installation","title":"Redis Module Installation & Development","description":"H\u01b0\u1edbng d\u1eabn c\xe0i \u0111\u1eb7t, c\u1ea5u h\xecnh v\xe0 ph\xe1t tri\u1ec3n v\u1edbi Redis module.","source":"@site/docs/ecom-co/libs/redis/docs/redis-installation.md","sourceDirName":"ecom-co/libs/redis/docs","slug":"/redis-installation","permalink":"/document/vi/docs/redis-installation","draft":false,"unlisted":false,"editUrl":"https://github.com/ecom-co/document/tree/main/docs/ecom-co/libs/redis/docs/redis-installation.md","tags":[{"inline":true,"label":"installation","permalink":"/document/vi/docs/tags/installation"},{"inline":true,"label":"development","permalink":"/document/vi/docs/tags/development"},{"inline":true,"label":"configuration","permalink":"/document/vi/docs/tags/configuration"},{"inline":true,"label":"setup","permalink":"/document/vi/docs/tags/setup"},{"inline":true,"label":"redis-module","permalink":"/document/vi/docs/tags/redis-module"}],"version":"current","frontMatter":{"id":"redis-installation","title":"Redis Module Installation & Development","sidebar_label":"Installation & Development","slug":"/redis-installation","description":"H\u01b0\u1edbng d\u1eabn c\xe0i \u0111\u1eb7t, c\u1ea5u h\xecnh v\xe0 ph\xe1t tri\u1ec3n v\u1edbi Redis module.","tags":["installation","development","configuration","setup","redis-module"]},"sidebar":"tutorialSidebar","previous":{"title":"Redis Module","permalink":"/document/vi/docs/redis-overview"},"next":{"title":"Examples & Best Practices","permalink":"/document/vi/docs/redis-examples"}}');var i=s(74848),o=s(28453);s(11470),s(19365);const r={id:"redis-installation",title:"Redis Module Installation & Development",sidebar_label:"Installation & Development",slug:"/redis-installation",description:"H\u01b0\u1edbng d\u1eabn c\xe0i \u0111\u1eb7t, c\u1ea5u h\xecnh v\xe0 ph\xe1t tri\u1ec3n v\u1edbi Redis module.",tags:["installation","development","configuration","setup","redis-module"]},a=void 0,l={},c=[{value:"C\xe0i \u0111\u1eb7t",id:"c\xe0i-\u0111\u1eb7t",level:2},{value:"1. Y\xeau c\u1ea7u h\u1ec7 th\u1ed1ng",id:"1-y\xeau-c\u1ea7u-h\u1ec7-th\u1ed1ng",level:3},{value:"2. C\xe0i \u0111\u1eb7t package",id:"2-c\xe0i-\u0111\u1eb7t-package",level:3},{value:"3. C\xe0i \u0111\u1eb7t dependencies",id:"3-c\xe0i-\u0111\u1eb7t-dependencies",level:3},{value:"4. C\xe0i \u0111\u1eb7t Redis Server",id:"4-c\xe0i-\u0111\u1eb7t-redis-server",level:3},{value:"Ubuntu/Debian",id:"ubuntudebian",level:4},{value:"macOS",id:"macos",level:4},{value:"Windows",id:"windows",level:4},{value:"Docker Compose",id:"docker-compose",level:4},{value:"C\u1ea5u h\xecnh c\u01a1 b\u1ea3n",id:"c\u1ea5u-h\xecnh-c\u01a1-b\u1ea3n",level:2},{value:"1. Environment Variables",id:"1-environment-variables",level:3},{value:"2. Configuration Service",id:"2-configuration-service",level:3},{value:"3. App Module Configuration",id:"3-app-module-configuration",level:3},{value:"Development Setup",id:"development-setup",level:2},{value:"1. Development Scripts",id:"1-development-scripts",level:3},{value:"2. Development Configuration",id:"2-development-configuration",level:3},{value:"3. Hot Reload Configuration",id:"3-hot-reload-configuration",level:3},{value:"Testing Setup",id:"testing-setup",level:2},{value:"1. Test Configuration",id:"1-test-configuration",level:3},{value:"2. Test Utilities",id:"2-test-utilities",level:3},{value:"3. Test Examples",id:"3-test-examples",level:3},{value:"Production Configuration",id:"production-configuration",level:2},{value:"1. Production Environment Variables",id:"1-production-environment-variables",level:3},{value:"2. Production Redis Configuration",id:"2-production-redis-configuration",level:3},{value:"3. Health Check Configuration",id:"3-health-check-configuration",level:3},{value:"Monitoring &amp; Logging",id:"monitoring--logging",level:2},{value:"1. Redis Monitoring",id:"1-redis-monitoring",level:3},{value:"2. Logging Configuration",id:"2-logging-configuration",level:3},{value:"Deployment",id:"deployment",level:2},{value:"1. Docker Configuration",id:"1-docker-configuration",level:3},{value:"2. Docker Compose Production",id:"2-docker-compose-production",level:3},{value:"3. Kubernetes Configuration",id:"3-kubernetes-configuration",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"1. Common Issues",id:"1-common-issues",level:3},{value:"Connection Issues",id:"connection-issues",level:4},{value:"Memory Issues",id:"memory-issues",level:4},{value:"Performance Issues",id:"performance-issues",level:4},{value:"2. Debug Configuration",id:"2-debug-configuration",level:3}];function d(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"T\xe0i li\u1ec7u n\xe0y h\u01b0\u1edbng d\u1eabn c\xe1ch c\xe0i \u0111\u1eb7t, c\u1ea5u h\xecnh v\xe0 ph\xe1t tri\u1ec3n v\u1edbi Redis module. Bao g\u1ed3m c\xe1c b\u01b0\u1edbc setup, development workflow v\xe0 deployment."})}),"\n",(0,i.jsx)(n.h2,{id:"c\xe0i-\u0111\u1eb7t",children:"C\xe0i \u0111\u1eb7t"}),"\n",(0,i.jsx)(n.h3,{id:"1-y\xeau-c\u1ea7u-h\u1ec7-th\u1ed1ng",children:"1. Y\xeau c\u1ea7u h\u1ec7 th\u1ed1ng"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Node.js"}),": >= 18.0.0"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"NestJS"}),": >= 10.0.0"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Redis Server"}),": >= 6.0.0"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"TypeScript"}),": >= 5.0.0"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-c\xe0i-\u0111\u1eb7t-package",children:"2. C\xe0i \u0111\u1eb7t package"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# S\u1eed d\u1ee5ng npm\nnpm install @ecom-co/redis\n\n# S\u1eed d\u1ee5ng yarn\nyarn add @ecom-co/redis\n\n# S\u1eed d\u1ee5ng pnpm\npnpm add @ecom-co/redis\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-c\xe0i-\u0111\u1eb7t-dependencies",children:"3. C\xe0i \u0111\u1eb7t dependencies"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Core dependencies\nnpm install ioredis\n\n# Optional dependencies\nnpm install @nestjs/terminus  # Cho health checks\nnpm install @nestjs/schedule  # Cho background jobs\n"})}),"\n",(0,i.jsx)(n.h3,{id:"4-c\xe0i-\u0111\u1eb7t-redis-server",children:"4. C\xe0i \u0111\u1eb7t Redis Server"}),"\n",(0,i.jsx)(n.h4,{id:"ubuntudebian",children:"Ubuntu/Debian"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo apt update\nsudo apt install redis-server\nsudo systemctl start redis-server\nsudo systemctl enable redis-server\n"})}),"\n",(0,i.jsx)(n.h4,{id:"macos",children:"macOS"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# S\u1eed d\u1ee5ng Homebrew\nbrew install redis\nbrew services start redis\n\n# Ho\u1eb7c s\u1eed d\u1ee5ng Docker\ndocker run -d -p 6379:6379 redis:7-alpine\n"})}),"\n",(0,i.jsx)(n.h4,{id:"windows",children:"Windows"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# S\u1eed d\u1ee5ng WSL2 ho\u1eb7c Docker\ndocker run -d -p 6379:6379 redis:7-alpine\n"})}),"\n",(0,i.jsx)(n.h4,{id:"docker-compose",children:"Docker Compose"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"version: '3.8'\nservices:\n    redis:\n        image: redis:7-alpine\n        ports:\n            - '6379:6379'\n        volumes:\n            - redis_data:/data\n        command: redis-server --appendonly yes\n        restart: unless-stopped\n\n    redis-cluster:\n        image: redis:7-alpine\n        ports:\n            - '7000:7000'\n            - '7001:7001'\n            - '7002:7002'\n        volumes:\n            - ./redis-cluster.conf:/usr/local/etc/redis/redis.conf\n        command: redis-server /usr/local/etc/redis/redis.conf\n\nvolumes:\n    redis_data:\n"})}),"\n",(0,i.jsx)(n.h2,{id:"c\u1ea5u-h\xecnh-c\u01a1-b\u1ea3n",children:"C\u1ea5u h\xecnh c\u01a1 b\u1ea3n"}),"\n",(0,i.jsx)(n.h3,{id:"1-environment-variables",children:"1. Environment Variables"}),"\n",(0,i.jsxs)(n.p,{children:["T\u1ea1o file ",(0,i.jsx)(n.code,{children:".env"})," trong project root:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-env",children:"# Redis Configuration\nREDIS_HOST=localhost\nREDIS_PORT=6379\nREDIS_PASSWORD=\nREDIS_DB=0\n\n# Redis Cluster (optional)\nREDIS_CLUSTER_NODES=localhost:7000,localhost:7001,localhost:7002\n\n# Redis Sentinel (optional)\nREDIS_SENTINEL_HOSTS=localhost:26379,localhost:26380,localhost:26381\nREDIS_SENTINEL_NAME=mymaster\nREDIS_SENTINEL_PASSWORD=\nREDIS_SENTINEL_USERNAME=\n\n# Application Configuration\nNODE_ENV=development\nREDIS_KEY_PREFIX=app:\nREDIS_CONNECTION_TIMEOUT=10000\nREDIS_COMMAND_TIMEOUT=5000\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-configuration-service",children:"2. Configuration Service"}),"\n",(0,i.jsx)(n.p,{children:"T\u1ea1o configuration service \u0111\u1ec3 qu\u1ea3n l\xfd Redis settings:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class RedisConfigService {\n    constructor(private configService: ConfigService) {}\n\n    get redisConfig() {\n        return {\n            clients: [\n                {\n                    type: 'single' as const,\n                    name: 'default',\n                    host: this.configService.get('REDIS_HOST', 'localhost'),\n                    port: this.configService.get('REDIS_PORT', 6379),\n                    password: this.configService.get('REDIS_PASSWORD'),\n                    db: this.configService.get('REDIS_DB', 0),\n                    keyPrefix: this.configService.get('REDIS_KEY_PREFIX', ''),\n                    connectTimeout: this.configService.get('REDIS_CONNECTION_TIMEOUT', 10000),\n                    commandTimeout: this.configService.get('REDIS_COMMAND_TIMEOUT', 5000),\n                },\n            ],\n        };\n    }\n\n    get clusterConfig() {\n        const nodes = this.configService.get('REDIS_CLUSTER_NODES', 'localhost:7000');\n\n        return {\n            clients: [\n                {\n                    type: 'cluster' as const,\n                    name: 'cluster',\n                    nodes: nodes.split(',').map((node) => {\n                        const [host, port] = node.split(':');\n                        return { host, port: parseInt(port) };\n                    }),\n                },\n            ],\n        };\n    }\n\n    get sentinelConfig() {\n        const hosts = this.configService.get('REDIS_SENTINEL_HOSTS', 'localhost:26379');\n\n        return {\n            clients: [\n                {\n                    type: 'sentinel' as const,\n                    name: 'sentinel',\n                    sentinels: hosts.split(',').map((host) => {\n                        const [hostname, port] = host.split(':');\n                        return { host: hostname, port: parseInt(port) };\n                    }),\n                    sentinelName: this.configService.get('REDIS_SENTINEL_NAME', 'mymaster'),\n                    sentinelPassword: this.configService.get('REDIS_SENTINEL_PASSWORD'),\n                    sentinelUsername: this.configService.get('REDIS_SENTINEL_USERNAME'),\n                },\n            ],\n        };\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-app-module-configuration",children:"3. App Module Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { RedisModule } from '@ecom-co/redis';\nimport { RedisConfigService } from './config/redis-config.service';\n\n@Module({\n    imports: [\n        ConfigModule.forRoot({\n            isGlobal: true,\n            envFilePath: ['.env.local', '.env'],\n        }),\n        RedisModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [RedisConfigService],\n            useFactory: (config: RedisConfigService) => config.redisConfig,\n        }),\n    ],\n})\nexport class AppModule {}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"development-setup",children:"Development Setup"}),"\n",(0,i.jsx)(n.h3,{id:"1-development-scripts",children:"1. Development Scripts"}),"\n",(0,i.jsxs)(n.p,{children:["Th\xeam scripts v\xe0o ",(0,i.jsx)(n.code,{children:"package.json"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n    "scripts": {\n        "dev": "nest start --watch",\n        "dev:debug": "nest start --debug --watch",\n        "build": "nest build",\n        "start": "node dist/main",\n        "start:prod": "node dist/main",\n        "redis:start": "docker run -d -p 6379:6379 redis:7-alpine",\n        "redis:stop": "docker stop $(docker ps -q --filter ancestor=redis:7-alpine)",\n        "redis:cli": "docker exec -it $(docker ps -q --filter ancestor=redis:7-alpine) redis-cli",\n        "test": "jest",\n        "test:watch": "jest --watch",\n        "test:cov": "jest --coverage",\n        "test:e2e": "jest --config ./test/jest-e2e.json"\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-development-configuration",children:"2. Development Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["T\u1ea1o file ",(0,i.jsx)(n.code,{children:"config/redis.config.ts"})," cho development:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { RedisModuleOptions } from '@ecom-co/redis';\n\nexport const redisDevelopmentConfig: RedisModuleOptions = {\n    clients: [\n        {\n            type: 'single',\n            name: 'default',\n            host: 'localhost',\n            port: 6379,\n            keyPrefix: 'dev:',\n            lazyConnect: true, // Ch\u1ec9 connect khi c\u1ea7n\n            retryDelayOnFailover: 100,\n            maxRetriesPerRequest: 3,\n        },\n        {\n            type: 'single',\n            name: 'cache',\n            host: 'localhost',\n            port: 6379,\n            keyPrefix: 'cache:',\n            db: 1,\n        },\n        {\n            type: 'single',\n            name: 'session',\n            host: 'localhost',\n            port: 6379,\n            keyPrefix: 'session:',\n            db: 2,\n        },\n    ],\n    logger: console, // S\u1eed d\u1ee5ng console logger cho development\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-hot-reload-configuration",children:"3. Hot Reload Configuration"}),"\n",(0,i.jsx)(n.p,{children:"C\u1ea5u h\xecnh hot reload cho development:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// main.ts\nasync function bootstrap() {\n    const app = await NestFactory.create(AppModule);\n\n    if (process.env.NODE_ENV === 'development') {\n        // Enable hot reload\n        if (module.hot) {\n            module.hot.accept();\n            module.hot.dispose(() => app.close());\n        }\n    }\n\n    await app.listen(3000);\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"testing-setup",children:"Testing Setup"}),"\n",(0,i.jsx)(n.h3,{id:"1-test-configuration",children:"1. Test Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["T\u1ea1o file ",(0,i.jsx)(n.code,{children:"test/redis-test.config.ts"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { RedisModuleOptions } from '@ecom-co/redis';\n\nexport const redisTestConfig: RedisModuleOptions = {\n    clients: [\n        {\n            type: 'single',\n            name: 'default',\n            host: 'localhost',\n            port: 6379,\n            keyPrefix: 'test:',\n            db: 15, // S\u1eed d\u1ee5ng database ri\xeang cho testing\n            lazyConnect: true,\n        },\n    ],\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-test-utilities",children:"2. Test Utilities"}),"\n",(0,i.jsxs)(n.p,{children:["T\u1ea1o file ",(0,i.jsx)(n.code,{children:"test/redis-test.utils.ts"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { RedisFacade } from '@ecom-co/redis';\nimport Redis from 'ioredis';\n\nexport class RedisTestUtils {\n    private redis: Redis;\n\n    constructor() {\n        this.redis = new Redis({\n            host: 'localhost',\n            port: 6379,\n            db: 15,\n            keyPrefix: 'test:',\n        });\n    }\n\n    async cleanup() {\n        const keys = await this.redis.keys('*');\n        if (keys.length > 0) {\n            await this.redis.del(...keys);\n        }\n    }\n\n    async createTestData(key: string, value: any) {\n        await this.redis.set(key, JSON.stringify(value));\n    }\n\n    async getTestData(key: string) {\n        const data = await this.redis.get(key);\n        return data ? JSON.parse(data) : null;\n    }\n\n    async disconnect() {\n        await this.redis.disconnect();\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-test-examples",children:"3. Test Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { Test, TestingModule } from '@nestjs/testing';\nimport { RedisModule } from '@ecom-co/redis';\nimport { CacheService } from './cache.service';\nimport { redisTestConfig } from '../test/redis-test.config';\nimport { RedisTestUtils } from '../test/redis-test.utils';\n\ndescribe('CacheService', () => {\n    let service: CacheService;\n    let testUtils: RedisTestUtils;\n\n    beforeAll(async () => {\n        testUtils = new RedisTestUtils();\n    });\n\n    beforeEach(async () => {\n        const module: TestingModule = await Test.createTestingModule({\n            imports: [RedisModule.forRoot(redisTestConfig)],\n            providers: [CacheService],\n        }).compile();\n\n        service = module.get<CacheService>(CacheService);\n        await testUtils.cleanup();\n    });\n\n    afterEach(async () => {\n        await testUtils.cleanup();\n    });\n\n    afterAll(async () => {\n        await testUtils.disconnect();\n    });\n\n    it('should cache and retrieve data', async () => {\n        const testData = { id: 1, name: 'Test User' };\n        const key = 'user:1';\n\n        // Set data\n        await service.set(key, testData);\n\n        // Get data\n        const retrieved = await service.get(key);\n\n        expect(retrieved).toEqual(testData);\n    });\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"production-configuration",children:"Production Configuration"}),"\n",(0,i.jsx)(n.h3,{id:"1-production-environment-variables",children:"1. Production Environment Variables"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-env",children:"# Production Redis Configuration\nREDIS_HOST=redis.production.com\nREDIS_PORT=6379\nREDIS_PASSWORD=strong_password_here\nREDIS_DB=0\nREDIS_KEY_PREFIX=prod:\nREDIS_CONNECTION_TIMEOUT=30000\nREDIS_COMMAND_TIMEOUT=10000\n\n# Redis Cluster Configuration\nREDIS_CLUSTER_ENABLED=true\nREDIS_CLUSTER_NODES=redis-1:7000,redis-2:7000,redis-3:7000\n\n# Redis Sentinel Configuration\nREDIS_SENTINEL_ENABLED=false\nREDIS_SENTINEL_HOSTS=localhost:26379\nREDIS_SENTINEL_NAME=mymaster\n\n# Application Configuration\nNODE_ENV=production\nREDIS_MAX_MEMORY=2gb\nREDIS_EVICTION_POLICY=allkeys-lru\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-production-redis-configuration",children:"2. Production Redis Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { RedisModuleOptions } from '@ecom-co/redis';\n\nexport const redisProductionConfig: RedisModuleOptions = {\n    clients: [\n        {\n            type: 'cluster',\n            name: 'default',\n            nodes: [\n                { host: 'redis-1', port: 7000 },\n                { host: 'redis-2', port: 7000 },\n                { host: 'redis-3', port: 7000 },\n            ],\n            keyPrefix: 'prod:',\n            connectTimeout: 30000,\n            commandTimeout: 10000,\n            retryDelayOnFailover: 1000,\n            maxRetriesPerRequest: 5,\n            enableOfflineQueue: false,\n            enableReadyCheck: true,\n            maxLoadingTimeout: 30000,\n        },\n    ],\n    logger: {\n        log: (message: string) => console.log(`[REDIS] ${message}`),\n        error: (message: string, error?: any) => console.error(`[REDIS] ${message}`, error),\n        warn: (message: string) => console.warn(`[REDIS] ${message}`),\n        debug: (message: string) => console.debug(`[REDIS] ${message}`),\n        verbose: (message: string) => console.log(`[REDIS] ${message}`),\n    },\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-health-check-configuration",children:"3. Health Check Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { Module } from '@nestjs/common';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { RedisModule } from '@ecom-co/redis';\nimport { HealthController } from './health/health.controller';\nimport { redisProductionConfig } from './config/redis-production.config';\n\n@Module({\n    imports: [TerminusModule, RedisModule.forRoot(redisProductionConfig)],\n    controllers: [HealthController],\n})\nexport class AppModule {}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { Controller, Get } from '@nestjs/common';\nimport { HealthCheck, HealthCheckService } from '@nestjs/terminus';\nimport { InjectRedis } from '@ecom-co/redis';\nimport { checkRedisHealthy } from '@ecom-co/redis';\nimport type { Redis } from 'ioredis';\n\n@Controller('health')\nexport class HealthController {\n    constructor(\n        private health: HealthCheckService,\n        @InjectRedis() private readonly redis: Redis,\n    ) {}\n\n    @Get()\n    @HealthCheck()\n    check() {\n        return this.health.check([() => checkRedisHealthy(this.redis, 'redis')]);\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"monitoring--logging",children:"Monitoring & Logging"}),"\n",(0,i.jsx)(n.h3,{id:"1-redis-monitoring",children:"1. Redis Monitoring"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { Injectable, Logger } from '@nestjs/common';\nimport { Cron, CronExpression } from '@nestjs/schedule';\nimport { InjectRedisFacade } from '@ecom-co/redis';\nimport { RedisFacade } from '@ecom-co/redis';\n\n@Injectable()\nexport class RedisMonitoringService {\n    private readonly logger = new Logger(RedisMonitoringService.name);\n\n    constructor(@InjectRedisFacade() private readonly cache: RedisFacade) {}\n\n    @Cron(CronExpression.EVERY_MINUTE)\n    async monitorRedisHealth() {\n        try {\n            const health = await this.cache.healthCheck();\n\n            if (health.status === 'unhealthy') {\n                this.logger.error(`Redis unhealthy: ${health.error}`);\n                // Send alert to monitoring system\n                await this.sendAlert('ERROR', 'Redis is unhealthy', health);\n            }\n\n            if (health.latency > 100) {\n                this.logger.warn(`Redis latency high: ${health.latency}ms`);\n                await this.sendAlert('WARNING', 'Redis latency is high', health);\n            }\n        } catch (error) {\n            this.logger.error('Redis monitoring failed', error);\n        }\n    }\n\n    @Cron(CronExpression.EVERY_5_MINUTES)\n    async monitorRedisStats() {\n        try {\n            const stats = await this.cache.getCacheStats();\n\n            this.logger.log(\n                `Redis Stats - Hit Rate: ${stats.hitRate}%, Memory: ${stats.memoryUsage}, Keys: ${stats.totalKeys}`,\n            );\n\n            if (stats.hitRate < 80) {\n                await this.sendAlert('WARNING', 'Cache hit rate is low', stats);\n            }\n        } catch (error) {\n            this.logger.error('Redis stats monitoring failed', error);\n        }\n    }\n\n    private async sendAlert(level: string, message: string, context: any) {\n        // Implement alert sending logic\n        this.logger.log(`ALERT [${level}]: ${message}`, context);\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-logging-configuration",children:"2. Logging Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { LoggerService } from '@nestjs/common';\n\nexport class RedisLogger implements LoggerService {\n    log(message: string, context?: string) {\n        console.log(`[REDIS] ${message}`, context);\n    }\n\n    error(message: string, trace?: string, context?: string) {\n        console.error(`[REDIS ERROR] ${message}`, trace, context);\n    }\n\n    warn(message: string, context?: string) {\n        console.warn(`[REDIS WARN] ${message}`, context);\n    }\n\n    debug(message: string, context?: string) {\n        console.debug(`[REDIS DEBUG] ${message}`, context);\n    }\n\n    verbose(message: string, context?: string) {\n        console.log(`[REDIS VERBOSE] ${message}`, context);\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"deployment",children:"Deployment"}),"\n",(0,i.jsx)(n.h3,{id:"1-docker-configuration",children:"1. Docker Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dockerfile",children:'# Dockerfile\nFROM node:18-alpine\n\nWORKDIR /app\n\nCOPY package*.json ./\nRUN npm ci --only=production\n\nCOPY dist ./dist\nCOPY .env.production ./.env\n\nEXPOSE 3000\n\nCMD ["node", "dist/main"]\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-docker-compose-production",children:"2. Docker Compose Production"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"version: '3.8'\nservices:\n    app:\n        build: .\n        ports:\n            - '3000:3000'\n        environment:\n            - NODE_ENV=production\n            - REDIS_HOST=redis\n        depends_on:\n            - redis\n        restart: unless-stopped\n\n    redis:\n        image: redis:7-alpine\n        ports:\n            - '6379:6379'\n        volumes:\n            - redis_data:/data\n        command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru\n        restart: unless-stopped\n\nvolumes:\n    redis_data:\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-kubernetes-configuration",children:"3. Kubernetes Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# redis-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n    name: redis\nspec:\n    replicas: 3\n    selector:\n        matchLabels:\n            app: redis\n    template:\n        metadata:\n            labels:\n                app: redis\n        spec:\n            containers:\n                - name: redis\n                  image: redis:7-alpine\n                  ports:\n                      - containerPort: 6379\n                  resources:\n                      requests:\n                          memory: '512Mi'\n                          cpu: '250m'\n                      limits:\n                          memory: '1Gi'\n                          cpu: '500m'\n                  volumeMounts:\n                      - name: redis-data\n                        mountPath: /data\n            volumes:\n                - name: redis-data\n                  emptyDir: {}\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n    name: redis\nspec:\n    selector:\n        app: redis\n    ports:\n        - port: 6379\n          targetPort: 6379\n    type: ClusterIP\n"})}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(n.h3,{id:"1-common-issues",children:"1. Common Issues"}),"\n",(0,i.jsx)(n.h4,{id:"connection-issues",children:"Connection Issues"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Ki\u1ec3m tra Redis server\nredis-cli ping\n\n# Ki\u1ec3m tra connection\nredis-cli -h localhost -p 6379 ping\n\n# Ki\u1ec3m tra logs\ndocker logs <redis-container-id>\n"})}),"\n",(0,i.jsx)(n.h4,{id:"memory-issues",children:"Memory Issues"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Ki\u1ec3m tra memory usage\nredis-cli info memory\n\n# Ki\u1ec3m tra keys\nredis-cli dbsize\n\n# Clear database (c\u1ea9n th\u1eadn!)\nredis-cli flushdb\n"})}),"\n",(0,i.jsx)(n.h4,{id:"performance-issues",children:"Performance Issues"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Ki\u1ec3m tra slow queries\nredis-cli slowlog get 10\n\n# Ki\u1ec3m tra latency\nredis-cli --latency\n\n# Monitor commands\nredis-cli monitor\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-debug-configuration",children:"2. Debug Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// config/redis-debug.config.ts\nexport const redisDebugConfig: RedisModuleOptions = {\n    clients: [\n        {\n            type: 'single',\n            name: 'default',\n            host: 'localhost',\n            port: 6379,\n            keyPrefix: 'debug:',\n            lazyConnect: true,\n            retryDelayOnFailover: 100,\n            maxRetriesPerRequest: 1,\n            enableOfflineQueue: false,\n            enableReadyCheck: false,\n            // Debug options\n            debug: true,\n            showFriendlyErrorStack: true,\n        },\n    ],\n    logger: {\n        log: (message: string) => console.log(`[REDIS DEBUG] ${message}`),\n        error: (message: string, error?: any) => console.error(`[REDIS DEBUG ERROR] ${message}`, error),\n        warn: (message: string) => console.warn(`[REDIS DEBUG WARN] ${message}`),\n        debug: (message: string) => console.debug(`[REDIS DEBUG DEBUG] ${message}`),\n        verbose: (message: string) => console.log(`[REDIS DEBUG VERBOSE] ${message}`),\n    },\n};\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Development Tip"}),": S\u1eed d\u1ee5ng ",(0,i.jsx)(n.code,{children:"lazyConnect: true"})," trong development \u0111\u1ec3 tr\xe1nh connection errors khi Redis ch\u01b0a s\u1eb5n s\xe0ng."]})}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Production Warning"}),": Lu\xf4n s\u1eed d\u1ee5ng strong passwords v\xe0 network security cho Redis trong production environment."]})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Monitoring Tip"}),": Implement comprehensive monitoring v\xe0 alerting cho Redis operations \u0111\u1ec3 detect issues s\u1edbm."]})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);