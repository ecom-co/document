"use strict";(self.webpackChunktemplate_docs=self.webpackChunktemplate_docs||[]).push([[4193],{338:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"http-exception/error-handling","title":"Error Handling","description":"T\xecm hi\u1ec3u v\u1ec1 Error Handling - c\xe1ch x\u1eed l\xfd l\u1ed7i m\u1ed9t c\xe1ch hi\u1ec7u qu\u1ea3 v\xe0 nh\u1ea5t qu\xe1n trong NestJS","source":"@site/docs/http-exception/error-handling.md","sourceDirName":"http-exception","slug":"/http-exception/error-handling","permalink":"/document/vi/docs/http-exception/error-handling","draft":false,"unlisted":false,"editUrl":"https://github.com/ecom-co/document/tree/main/docs/http-exception/error-handling.md","tags":[],"version":"current","frontMatter":{"title":"Error Handling","description":"T\xecm hi\u1ec3u v\u1ec1 Error Handling - c\xe1ch x\u1eed l\xfd l\u1ed7i m\u1ed9t c\xe1ch hi\u1ec7u qu\u1ea3 v\xe0 nh\u1ea5t qu\xe1n trong NestJS"},"sidebar":"tutorialSidebar","previous":{"title":"Status Codes","permalink":"/document/vi/docs/http-exception/status-codes"},"next":{"title":"Microservices Overview","permalink":"/document/vi/docs/microservices/microservices-overview"}}');var i=n(4848),o=n(8453);const s={title:"Error Handling",description:"T\xecm hi\u1ec3u v\u1ec1 Error Handling - c\xe1ch x\u1eed l\xfd l\u1ed7i m\u1ed9t c\xe1ch hi\u1ec7u qu\u1ea3 v\xe0 nh\u1ea5t qu\xe1n trong NestJS"},a="Error Handling",c={},l=[{value:"Error Handling l\xe0 g\xec?",id:"error-handling-l\xe0-g\xec",level:2},{value:"C\xe1c lo\u1ea1i Errors",id:"c\xe1c-lo\u1ea1i-errors",level:2},{value:"1. Client Errors (4xx)",id:"1-client-errors-4xx",level:3},{value:"2. Server Errors (5xx)",id:"2-server-errors-5xx",level:3},{value:"3. Network Errors",id:"3-network-errors",level:3},{value:"4. Business Logic Errors",id:"4-business-logic-errors",level:3},{value:"5. Validation Errors",id:"5-validation-errors",level:3},{value:"Built-in Error Handling",id:"built-in-error-handling",level:2},{value:"1. HTTP Exceptions",id:"1-http-exceptions",level:3},{value:"2. Custom Exceptions",id:"2-custom-exceptions",level:3},{value:"Error Handling Strategies",id:"error-handling-strategies",level:2},{value:"1. Try-Catch Blocks",id:"1-try-catch-blocks",level:3},{value:"2. Error Interceptors",id:"2-error-interceptors",level:3},{value:"3. Global Exception Filters",id:"3-global-exception-filters",level:3},{value:"Error Logging v\xe0 Monitoring",id:"error-logging-v\xe0-monitoring",level:2},{value:"1. Structured Logging",id:"1-structured-logging",level:3},{value:"2. Error Monitoring",id:"2-error-monitoring",level:3},{value:"Error Recovery Strategies",id:"error-recovery-strategies",level:2},{value:"1. Retry Logic",id:"1-retry-logic",level:3},{value:"2. Circuit Breaker Pattern",id:"2-circuit-breaker-pattern",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Error Classification",id:"1-error-classification",level:3},{value:"2. Error Messages",id:"2-error-messages",level:3},{value:"3. Error Logging",id:"3-error-logging",level:3}];function d(e){const r={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"error-handling",children:"Error Handling"})}),"\n",(0,i.jsx)(r.p,{children:"Error Handling trong NestJS l\xe0 qu\xe1 tr\xecnh x\u1eed l\xfd v\xe0 qu\u1ea3n l\xfd c\xe1c l\u1ed7i x\u1ea3y ra trong \u1ee9ng d\u1ee5ng m\u1ed9t c\xe1ch c\xf3 h\u1ec7 th\u1ed1ng. N\xf3 \u0111\u1ea3m b\u1ea3o r\u1eb1ng client nh\u1eadn \u0111\u01b0\u1ee3c th\xf4ng tin l\u1ed7i h\u1eefu \xedch v\xe0 server c\xf3 th\u1ec3 log v\xe0 monitor l\u1ed7i hi\u1ec7u qu\u1ea3."}),"\n",(0,i.jsx)(r.mermaid,{value:"flowchart LR\n    A[Error Occurs] --\x3e B[Error Detection]\n    B --\x3e C[Error Classification]\n    C --\x3e D[Error Processing]\n    D --\x3e E[Error Response]\n    D --\x3e F[Error Logging]\n    \n    style A fill:#ffebee\n    style B fill:#fff3e0\n    style C fill:#e8f5e8\n    style D fill:#f3e5f5\n    style E fill:#e1f5fe\n    style F fill:#fce4ec"}),"\n",(0,i.jsx)(r.admonition,{title:"\ud83d\udca1 Kh\xe1i ni\u1ec7m c\u01a1 b\u1ea3n",type:"tip",children:(0,i.jsx)(r.p,{children:'Error Handling gi\u1ed1ng nh\u01b0 "h\u1ec7 th\u1ed1ng b\xe1o \u0111\u1ed9ng" - ph\xe1t hi\u1ec7n, ph\xe2n lo\u1ea1i v\xe0 x\u1eed l\xfd l\u1ed7i m\u1ed9t c\xe1ch th\xf4ng minh \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o \u1ee9ng d\u1ee5ng ho\u1ea1t \u0111\u1ed9ng \u1ed5n \u0111\u1ecbnh.'})}),"\n",(0,i.jsx)(r.h2,{id:"error-handling-l\xe0-g\xec",children:"Error Handling l\xe0 g\xec?"}),"\n",(0,i.jsx)(r.p,{children:"Error Handling trong NestJS:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Error Detection"})," - Ph\xe1t hi\u1ec7n l\u1ed7i khi ch\xfang x\u1ea3y ra"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Error Classification"})," - Ph\xe2n lo\u1ea1i l\u1ed7i theo m\u1ee9c \u0111\u1ed9 nghi\xeam tr\u1ecdng"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Error Processing"})," - X\u1eed l\xfd l\u1ed7i theo logic nghi\u1ec7p v\u1ee5"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Error Response"})," - Tr\u1ea3 v\u1ec1 th\xf4ng tin l\u1ed7i h\u1eefu \xedch cho client"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Error Logging"})," - Ghi log l\u1ed7i \u0111\u1ec3 debug v\xe0 monitoring"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Error Recovery"})," - Kh\xf4i ph\u1ee5c \u1ee9ng d\u1ee5ng sau khi c\xf3 l\u1ed7i"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"c\xe1c-lo\u1ea1i-errors",children:"C\xe1c lo\u1ea1i Errors"}),"\n",(0,i.jsx)(r.mermaid,{value:"flowchart TD\n    A[Error Types] --\x3e B[Client Errors]\n    A --\x3e C[Server Errors]\n    A --\x3e D[Network Errors]\n    A --\x3e E[Business Logic Errors]\n    A --\x3e F[Validation Errors]\n    \n    B --\x3e G[400 Bad Request]\n    B --\x3e H[401 Unauthorized]\n    B --\x3e I[403 Forbidden]\n    B --\x3e J[404 Not Found]\n    \n    C --\x3e K[500 Internal Server Error]\n    C --\x3e L[502 Bad Gateway]\n    C --\x3e M[503 Service Unavailable]\n    \n    style A fill:#e3f2fd\n    style B fill:#ffebee\n    style C fill:#fce4ec\n    style D fill:#fff3e0\n    style E fill:#e8f5e8\n    style F fill:#f3e5f5"}),"\n",(0,i.jsx)(r.h3,{id:"1-client-errors-4xx",children:"1. Client Errors (4xx)"}),"\n",(0,i.jsx)(r.p,{children:"L\u1ed7i do client g\xe2y ra"}),"\n",(0,i.jsx)(r.h3,{id:"2-server-errors-5xx",children:"2. Server Errors (5xx)"}),"\n",(0,i.jsx)(r.p,{children:"L\u1ed7i do server g\xe2y ra"}),"\n",(0,i.jsx)(r.h3,{id:"3-network-errors",children:"3. Network Errors"}),"\n",(0,i.jsx)(r.p,{children:"L\u1ed7i k\u1ebft n\u1ed1i m\u1ea1ng"}),"\n",(0,i.jsx)(r.h3,{id:"4-business-logic-errors",children:"4. Business Logic Errors"}),"\n",(0,i.jsx)(r.p,{children:"L\u1ed7i logic nghi\u1ec7p v\u1ee5"}),"\n",(0,i.jsx)(r.h3,{id:"5-validation-errors",children:"5. Validation Errors"}),"\n",(0,i.jsx)(r.p,{children:"L\u1ed7i validate d\u1eef li\u1ec7u"}),"\n",(0,i.jsx)(r.h2,{id:"built-in-error-handling",children:"Built-in Error Handling"}),"\n",(0,i.jsx)(r.h3,{id:"1-http-exceptions",children:"1. HTTP Exceptions"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",metastring:'title="Built-in HTTP Exceptions"',children:"import { \n  BadRequestException,\n  UnauthorizedException,\n  ForbiddenException,\n  NotFoundException,\n  ConflictException,\n  InternalServerErrorException,\n  HttpStatus,\n} from '@nestjs/common';\n\n@Controller('users')\nexport class UserController {\n  @Get(':id')\n  findOne(@Param('id') id: string): User {\n    // Validation error\n    if (!id || id.length < 3) {\n      throw new BadRequestException({\n        message: 'ID is required and must be at least 3 characters',\n        error: 'VALIDATION_ERROR',\n        statusCode: HttpStatus.BAD_REQUEST,\n      });\n    }\n\n    // Authentication error\n    if (!this.authService.isAuthenticated()) {\n      throw new UnauthorizedException('Authentication required');\n    }\n\n    // Authorization error\n    if (!this.authService.hasRole('admin')) {\n      throw new ForbiddenException('Admin access required');\n    }\n\n    // Resource not found error\n    const user = this.userService.findOne(id);\n    if (!user) {\n      throw new NotFoundException({\n        message: `User with ID ${id} not found`,\n        error: 'USER_NOT_FOUND',\n        statusCode: HttpStatus.NOT_FOUND,\n      });\n    }\n\n    return user;\n  }\n\n  @Post()\n  create(@Body() createUserDto: CreateUserDto): User {\n    try {\n      // Check for conflicts\n      const existingUser = this.userService.findByEmail(createUserDto.email);\n      if (existingUser) {\n        throw new ConflictException({\n          message: 'User with this email already exists',\n          error: 'DUPLICATE_EMAIL',\n          statusCode: HttpStatus.CONFLICT,\n        });\n      }\n\n      return this.userService.create(createUserDto);\n    } catch (error) {\n      if (error instanceof ConflictException) {\n        throw error;\n      }\n      \n      // Log unexpected errors\n      this.logger.error('Failed to create user', {\n        error: error.message,\n        stack: error.stack,\n        dto: createUserDto,\n      });\n      \n      throw new InternalServerErrorException('Failed to create user');\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"2-custom-exceptions",children:"2. Custom Exceptions"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",metastring:'title="Custom Exceptions"',children:"// exceptions/business.exception.ts\nexport class BusinessException extends HttpException {\n  constructor(\n    message: string,\n    errorCode: string,\n    statusCode: number = HttpStatus.BAD_REQUEST,\n  ) {\n    super(\n      {\n        message,\n        error: errorCode,\n        statusCode,\n        timestamp: new Date().toISOString(),\n      },\n      statusCode,\n    );\n  }\n}\n\n// exceptions/user-not-found.exception.ts\nexport class UserNotFoundException extends BusinessException {\n  constructor(userId: string) {\n    super(\n      `User with ID ${userId} not found`,\n      'USER_NOT_FOUND',\n      HttpStatus.NOT_FOUND,\n    );\n  }\n}\n\n// exceptions/insufficient-balance.exception.ts\nexport class InsufficientBalanceException extends BusinessException {\n  constructor(required: number, available: number) {\n    super(\n      `Insufficient balance. Required: ${required}, Available: ${available}`,\n      'INSUFFICIENT_BALANCE',\n      HttpStatus.BAD_REQUEST,\n    );\n  }\n}\n\n// S\u1eed d\u1ee5ng\n@Controller('users')\nexport class UserController {\n  @Get(':id')\n  findOne(@Param('id') id: string): User {\n    const user = this.userService.findOne(id);\n    if (!user) {\n      throw new UserNotFoundException(id);\n    }\n    return user;\n  }\n\n  @Post('transfer')\n  transfer(@Body() transferDto: TransferDto): TransferResult {\n    const { fromUserId, toUserId, amount } = transferDto;\n    \n    const fromUser = this.userService.findOne(fromUserId);\n    if (!fromUser) {\n      throw new UserNotFoundException(fromUserId);\n    }\n    \n    if (fromUser.balance < amount) {\n      throw new InsufficientBalanceException(amount, fromUser.balance);\n    }\n    \n    return this.transferService.transfer(fromUserId, toUserId, amount);\n  }\n}\n"})}),"\n",(0,i.jsx)(r.h2,{id:"error-handling-strategies",children:"Error Handling Strategies"}),"\n",(0,i.jsx)(r.h3,{id:"1-try-catch-blocks",children:"1. Try-Catch Blocks"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",metastring:'title="Try-Catch Error Handling"',children:"@Controller('users')\nexport class UserController {\n  @Post()\n  async create(@Body() createUserDto: CreateUserDto): Promise<User> {\n    try {\n      // Validate input\n      await this.validateUserDto(createUserDto);\n      \n      // Check business rules\n      await this.checkBusinessRules(createUserDto);\n      \n      // Create user\n      const user = await this.userService.create(createUserDto);\n      \n      // Send welcome email\n      await this.emailService.sendWelcomeEmail(user.email);\n      \n      return user;\n    } catch (error) {\n      // Log error with context\n      this.logger.error('Failed to create user', {\n        error: error.message,\n        stack: error.stack,\n        dto: createUserDto,\n        userId: error.userId,\n      });\n\n      // Re-throw if it's a known exception\n      if (error instanceof HttpException) {\n        throw error;\n      }\n\n      // Handle unexpected errors\n      if (error.code === 'ER_DUP_ENTRY') {\n        throw new ConflictException('User with this email already exists');\n      }\n\n      if (error.code === 'ER_NO_REFERENCED_ROW') {\n        throw new BadRequestException('Referenced entity does not exist');\n      }\n\n      // Generic error for unknown cases\n      throw new InternalServerErrorException('Failed to create user');\n    }\n  }\n\n  private async validateUserDto(dto: CreateUserDto): Promise<void> {\n    if (!dto.email || !this.isValidEmail(dto.email)) {\n      throw new BadRequestException('Valid email is required');\n    }\n\n    if (!dto.password || dto.password.length < 8) {\n      throw new BadRequestException('Password must be at least 8 characters');\n    }\n  }\n\n  private async checkBusinessRules(dto: CreateUserDto): Promise<void> {\n    // Check if email domain is allowed\n    const domain = dto.email.split('@')[1];\n    if (!this.allowedDomains.includes(domain)) {\n      throw new ForbiddenException('Email domain not allowed');\n    }\n\n    // Check if user is not banned\n    if (await this.userService.isBanned(dto.email)) {\n      throw new ForbiddenException('User is banned');\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"2-error-interceptors",children:"2. Error Interceptors"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",metastring:'title="Error Handling Interceptor"',children:"@Injectable()\nexport class ErrorHandlingInterceptor implements NestInterceptor {\n  constructor(private readonly logger: Logger) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n    return next.handle().pipe(\n      catchError(error => {\n        const request = context.switchToHttp().getRequest();\n        \n        // Log error with request context\n        this.logger.error('Request failed', {\n          error: error.message,\n          stack: error.stack,\n          url: request.url,\n          method: request.method,\n          userId: request.user?.id,\n          timestamp: new Date().toISOString(),\n        });\n\n        // Re-throw the error\n        return throwError(() => error);\n      }),\n    );\n  }\n}\n\n// S\u1eed d\u1ee5ng\n@Controller('users')\n@UseInterceptors(ErrorHandlingInterceptor)\nexport class UserController {\n  // Controller methods\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"3-global-exception-filters",children:"3. Global Exception Filters"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",metastring:'title="Global Exception Filter"',children:"@Catch()\nexport class GlobalExceptionFilter implements ExceptionFilter {\n  constructor(\n    private readonly logger: Logger,\n    private readonly configService: ConfigService,\n  ) {}\n\n  catch(exception: unknown, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse<Response>();\n    const request = ctx.getRequest<Request>();\n\n    let status = HttpStatus.INTERNAL_SERVER_ERROR;\n    let message = 'Internal server error';\n    let errorCode = 'INTERNAL_ERROR';\n\n    if (exception instanceof HttpException) {\n      status = exception.getStatus();\n      const exceptionResponse = exception.getResponse();\n      \n      if (typeof exceptionResponse === 'object') {\n        message = exceptionResponse['message'] || exception.message;\n        errorCode = exceptionResponse['error'] || 'HTTP_ERROR';\n      } else {\n        message = exception.message;\n        errorCode = 'HTTP_ERROR';\n      }\n    } else if (exception instanceof Error) {\n      message = exception.message;\n      errorCode = 'UNKNOWN_ERROR';\n    }\n\n    // Log error\n    this.logger.error('Global exception caught', {\n      error: exception instanceof Error ? exception.message : 'Unknown error',\n      stack: exception instanceof Error ? exception.stack : undefined,\n      url: request.url,\n      method: request.method,\n      userId: request.user?.id,\n      status,\n      errorCode,\n      timestamp: new Date().toISOString(),\n    });\n\n    // Format response\n    const errorResponse = {\n      success: false,\n      statusCode: status,\n      message,\n      error: errorCode,\n      path: request.url,\n      timestamp: new Date().toISOString(),\n    };\n\n    // Add debug info in development\n    if (this.configService.get('NODE_ENV') === 'development') {\n      errorResponse['debug'] = {\n        stack: exception instanceof Error ? exception.stack : undefined,\n        details: exception,\n      };\n    }\n\n    response.status(status).json(errorResponse);\n  }\n}\n"})}),"\n",(0,i.jsx)(r.h2,{id:"error-logging-v\xe0-monitoring",children:"Error Logging v\xe0 Monitoring"}),"\n",(0,i.jsx)(r.h3,{id:"1-structured-logging",children:"1. Structured Logging"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",metastring:'title="Structured Error Logging"',children:"@Injectable()\nexport class ErrorLoggingService {\n  constructor(\n    private readonly logger: Logger,\n    private readonly metricsService: MetricsService,\n  ) {}\n\n  logError(error: Error, context: ErrorContext): void {\n    // Log error with structured data\n    this.logger.error('Application error occurred', {\n      error: {\n        name: error.name,\n        message: error.message,\n        stack: error.stack,\n        code: error['code'],\n      },\n      context: {\n        url: context.url,\n        method: context.method,\n        userId: context.userId,\n        requestId: context.requestId,\n        timestamp: new Date().toISOString(),\n      },\n      metadata: {\n        environment: process.env.NODE_ENV,\n        version: process.env.APP_VERSION,\n        service: 'user-service',\n      },\n    });\n\n    // Increment error metrics\n    this.metricsService.incrementErrorCount({\n      errorType: error.name,\n      endpoint: context.url,\n      method: context.method,\n    });\n  }\n}\n\ninterface ErrorContext {\n  url: string;\n  method: string;\n  userId?: string;\n  requestId?: string;\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"2-error-monitoring",children:"2. Error Monitoring"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",metastring:'title="Error Monitoring Service"',children:"@Injectable()\nexport class ErrorMonitoringService {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly httpService: HttpService,\n  ) {}\n\n  async reportError(error: Error, context: ErrorContext): Promise<void> {\n    try {\n      // Send error to external monitoring service\n      await this.httpService.post(\n        this.configService.get('ERROR_MONITORING_URL'),\n        {\n          error: {\n            name: error.name,\n            message: error.message,\n            stack: error.stack,\n          },\n          context,\n          timestamp: new Date().toISOString(),\n          environment: process.env.NODE_ENV,\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${this.configService.get('ERROR_MONITORING_API_KEY')}`,\n          },\n        },\n      ).toPromise();\n    } catch (reportError) {\n      // Log monitoring service error\n      console.error('Failed to report error to monitoring service:', reportError);\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(r.h2,{id:"error-recovery-strategies",children:"Error Recovery Strategies"}),"\n",(0,i.jsx)(r.h3,{id:"1-retry-logic",children:"1. Retry Logic"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",metastring:'title="Retry Logic for Errors"',children:"@Injectable()\nexport class RetryService {\n  async executeWithRetry<T>(\n    operation: () => Promise<T>,\n    maxRetries: number = 3,\n    delay: number = 1000,\n  ): Promise<T> {\n    let lastError: Error;\n\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        return await operation();\n      } catch (error) {\n        lastError = error;\n\n        // Don't retry for certain error types\n        if (this.shouldNotRetry(error)) {\n          throw error;\n        }\n\n        // Log retry attempt\n        console.log(`Attempt ${attempt} failed, retrying in ${delay}ms...`);\n\n        if (attempt < maxRetries) {\n          await this.sleep(delay);\n          delay *= 2; // Exponential backoff\n        }\n      }\n    }\n\n    throw lastError;\n  }\n\n  private shouldNotRetry(error: any): boolean {\n    // Don't retry for client errors (4xx)\n    if (error.status >= 400 && error.status < 500) {\n      return true;\n    }\n\n    // Don't retry for certain error types\n    const nonRetryableErrors = [\n      'ValidationError',\n      'AuthenticationError',\n      'AuthorizationError',\n    ];\n\n    return nonRetryableErrors.includes(error.name);\n  }\n\n  private sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}\n\n// S\u1eed d\u1ee5ng\n@Controller('users')\nexport class UserController {\n  constructor(private readonly retryService: RetryService) {}\n\n  @Post('external-api-call')\n  async callExternalApi(@Body() data: any): Promise<any> {\n    return this.retryService.executeWithRetry(\n      () => this.externalApiService.call(data),\n      3,    // max retries\n      1000, // initial delay\n    );\n  }\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"2-circuit-breaker-pattern",children:"2. Circuit Breaker Pattern"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",metastring:'title="Circuit Breaker Implementation"',children:"@Injectable()\nexport class CircuitBreakerService {\n  private state: 'CLOSED' | 'OPEN' | 'HALF_OPEN' = 'CLOSED';\n  private failureCount = 0;\n  private lastFailureTime = 0;\n  private readonly threshold = 5;\n  private readonly timeout = 60000; // 1 minute\n\n  async execute<T>(operation: () => Promise<T>): Promise<T> {\n    if (this.state === 'OPEN') {\n      if (Date.now() - this.lastFailureTime > this.timeout) {\n        this.state = 'HALF_OPEN';\n      } else {\n        throw new ServiceUnavailableException('Service temporarily unavailable');\n      }\n    }\n\n    try {\n      const result = await operation();\n      this.onSuccess();\n      return result;\n    } catch (error) {\n      this.onFailure();\n      throw error;\n    }\n  }\n\n  private onSuccess(): void {\n    this.failureCount = 0;\n    this.state = 'CLOSED';\n  }\n\n  private onFailure(): void {\n    this.failureCount++;\n    this.lastFailureTime = Date.now();\n\n    if (this.failureCount >= this.threshold) {\n      this.state = 'OPEN';\n    }\n  }\n\n  getStatus(): any {\n    return {\n      state: this.state,\n      failureCount: this.failureCount,\n      lastFailureTime: this.lastFailureTime,\n      threshold: this.threshold,\n      timeout: this.timeout,\n    };\n  }\n}\n"})}),"\n",(0,i.jsx)(r.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(r.h3,{id:"1-error-classification",children:"1. Error Classification"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",metastring:'title="Error Classification Best Practice"',children:"// \u2705 T\u1ed1t - Ph\xe2n lo\u1ea1i l\u1ed7i r\xf5 r\xe0ng\ntry {\n  const user = await this.userService.findOne(id);\n  if (!user) {\n    throw new NotFoundException('User not found');  // Client error\n  }\n  return user;\n} catch (error) {\n  if (error instanceof NotFoundException) {\n    throw error;  // Re-throw client errors\n  }\n  \n  // Log and re-throw server errors\n  this.logger.error('Database error', error);\n  throw new InternalServerErrorException('Failed to retrieve user');\n}\n\n// \u274c Kh\xf4ng t\u1ed1t - Kh\xf4ng ph\xe2n lo\u1ea1i l\u1ed7i\ntry {\n  const user = await this.userService.findOne(id);\n  return user;\n} catch (error) {\n  throw new InternalServerErrorException();  // 500 cho m\u1ecdi l\u1ed7i\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"2-error-messages",children:"2. Error Messages"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",metastring:'title="Error Messages Best Practice"',children:"// \u2705 T\u1ed1t - Error messages r\xf5 r\xe0ng v\xe0 h\u1eefu \xedch\nthrow new BadRequestException({\n  message: 'Email is required and must be a valid format',\n  error: 'VALIDATION_ERROR',\n  details: {\n    field: 'email',\n    value: email,\n    constraint: 'valid email format',\n  },\n});\n\n// \u274c Kh\xf4ng t\u1ed1t - Error messages m\u01a1 h\u1ed3\nthrow new BadRequestException('Invalid input');\n"})}),"\n",(0,i.jsx)(r.h3,{id:"3-error-logging",children:"3. Error Logging"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",metastring:'title="Error Logging Best Practice"',children:"// \u2705 T\u1ed1t - Log \u0111\u1ea7y \u0111\u1ee7 th\xf4ng tin\nthis.logger.error('User creation failed', {\n  error: error.message,\n  stack: error.stack,\n  userId: request.body?.id,\n  email: request.body?.email,\n  timestamp: new Date().toISOString(),\n  requestId: request.headers['x-request-id'],\n  userAgent: request.headers['user-agent'],\n});\n\n// \u274c Kh\xf4ng t\u1ed1t - Log thi\u1ebfu th\xf4ng tin\nconsole.error('Error occurred');\n"})}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.admonition,{title:"\ud83d\udca1 L\u1eddi khuy\xean t\u1ed5ng k\u1ebft",type:"tip",children:(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Ph\xe2n lo\u1ea1i l\u1ed7i r\xf5 r\xe0ng (client vs server)"}),"\n",(0,i.jsx)(r.li,{children:"S\u1eed d\u1ee5ng try-catch blocks m\u1ed9t c\xe1ch h\u1ee3p l\xfd"}),"\n",(0,i.jsx)(r.li,{children:"Log \u0111\u1ea7y \u0111\u1ee7 th\xf4ng tin \u0111\u1ec3 debug"}),"\n",(0,i.jsx)(r.li,{children:"Implement retry logic cho transient errors"}),"\n",(0,i.jsx)(r.li,{children:"S\u1eed d\u1ee5ng circuit breaker cho external services"}),"\n",(0,i.jsx)(r.li,{children:"Monitor v\xe0 alert cho critical errors"}),"\n",(0,i.jsx)(r.li,{children:"Test error handling scenarios"}),"\n",(0,i.jsx)(r.li,{children:"Cung c\u1ea5p error messages h\u1eefu \xedch cho client"}),"\n"]})}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"B\xe0i ti\u1ebfp theo:"})," ",(0,i.jsx)(r.a,{href:"/docs/advanced/overview",children:"Advanced Topics"})]})]})}function h(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>a});var t=n(6540);const i={},o=t.createContext(i);function s(e){const r=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(o.Provider,{value:r},e.children)}}}]);